{
  "openapi": "3.1.0",
  "info": {
    "version": "2.10.0",
    "title": "Report",
    "description": "# Introduction\nThe Searoutes web services APIs allow you to programmatically access tools and services from the Searoutes ecosystem. You can use these APIs to retrieve informations about vessel positions, vessel routes, GHG emissions, weather and other core data points. Searoutes services are divided in five categories:\n\n- Our [CO2 service](#tag/co2) calculates the CO2e emissions of a container on several modes of transport `SEA`, `AIR`, `RAIL` and `ROAD`.\n\n- Our [Vessel service](#tag/vessel) gives you up to date positions of vessels and estimated travel times to their next destination.\n\n- Our [Weather service](#tag/weather) lets you explore weather data points in the past or the future, at a location or on a route.\n\nNote that this is the documentation page for most recent stable version of Searoutes API. For the previous stable versions, [visit this documentation page](http://developer.searoutes.com/api/v1). \n\nIf you have a `valid API key`, you may try the API by copying the code samples in your shell, your favorite editor, or API development platform. Please be aware that some endpoints may not work with your API key depending on your service plan. If you would like a trial key or you want to add additional endpoints to your plan, please [get in touch with us](https://searoutes.typeform.com/to/ZRAoy5).\n",
    "termsOfService": "https://searoutes.com/terms-of-service/",
    "contact": {
      "email": "support@searoutes.com",
      "url": "https://searoutes.com"
    },
    "x-logo": {
      "url": "/img/Logo-searoutes-01.svg",
      "altText": "Searoutes logo"
    }
  },
  "tags": [
    {
      "name": "co2",
      "description": "CO2 API allows to calculate CO2e emissions from real routes and vessel characteristics on direct routes."
    },
    {
      "name": "vessel",
      "description": "Vessel API"
    },
    {
      "name": "weather",
      "description": "All things weather - tides, ocean currents, winds and waves - these data are available in statistical and historical form, or in prediction."
    }
  ],
  "servers": [
    {
      "url": "https://api.searoutes.com"
    }
  ],
  "paths": {
    "/asset/v2/run/co2": {
      "post": {
        "operationId": "getCO2ForARun",
        "tags": [
          "run (Beta)"
        ],
        "summary": "Get CO2 for a complete run (Beta)",
        "description": "> **Warning :**\n> this endpoint is a beta version, input and output contracts might change. \n\n## Description \n\nThis endpoint computes and assigns the right emissions to each order for a pickup and delivery collection by road (also called milk run).\nIt uses a road freight CO2 model which is taking into account empty running distances along with load factor between each pickup/delivery location.\nThis endpoint takes as input : locations and sequencing of the run, origin/destination and weight for each order, and details about the asset (fuel type).\n\n## Locations (run)\n\nA run is the itinerary taken, representing the sequence of stops made during the pickup and delivery collection.\nIt is made of a list of locations which can either be coordinates (longitude, latitude) or UNLOCODES.\nThe order of the location in the list is important and is used for order definition. The first element in the list is the first stop and has the index 1.\n\nExample : FRMRS has the index 2. The location with index 4 is described as coordinates (longitude, latitude)\n```JSON\n \"locations\": [\n    \"-1.26617431640625,50.79551936692376\",\n    \"FRMRS\",\n    \"FRQXB\",\n    \"8.8330078125,53.88491634606499\",\n    \"FRVAF\"\n]\n```\n\n## Orders \n\nOrders define the goods transported. Each order represents a parcel (`type = PARCEL`) transported from a location to another during the run. It is mandatory to precise the locations where the parcel is loaded and unloaded. \nWe use the index (position in the list of locations) for that purpose. \nAn order must also have a weight (in kilograms).\n\nExample of a parcel of 1500 kg moved from Marseille (FRMRS) to Valence (FRVAF) : \n\n```JSON \n{\n  \"fromIndex\": 2,\n  \"toIndex\": 5,\n  \"weight\": 1500,\n  \"id\": \"ABC123\",\n  \"type\": \"PARCEL\"\n}\n```\n\nThe endpoint takes a list of orders (1 or more orders). This list must describe all the goods moved during the run. \n\n## Details\n\nDetails of the truck can be passed. The CO2e calculation currently takes into account the fuel type passed (`DIESEL`, `PETROL` or `LPG`) and the truck size (4 to 60 = GWV 4t to 60t). If not pass, the fuel is by default `DIESEL` and the truck size is chosen to be the smallest truck that can contain the orders.\n\n## Metadata\n\nYou can add any information you want to metadata object and it will be returned to you in the response. Contents of metadata do not influence CO2e calculation.\n\n## Response\n\nThe response contains co2e emissions (in g) for the entire run (`co2e`) and for each individual order (`orders`). The emissions are split into WTT and TTW. \nThe definition of each order is returned back (`parameters`) along with the CO2e allocation (percentage of total CO2e). \n\nThe response contains an object `parameters` which returns back the definition of the run (with indices) and the details of the asset as given.\n\nIt also contains an object `properties` which details the parameters taken into account during the calculation. \nFor instance, the distance and the load factor of the truck between each stop are returned as well as the total distance and the allocation method used.  \n\n## Methodology\n\nThe CO2e emissions are computed along the run, for each part of it (leg). We know the weight of the goods transported for each leg and can then compute precise emissions of the truck with a model. \n\nThe allocation method we use is described in the norm EN 16258. We use great circle distances between the terminal location (theoretically located at an equidistant point of the first and last location) and the stops of the run.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "locations",
                  "orders",
                  "mode"
                ],
                "properties": {
                  "metadata": {
                    "type": "object"
                  },
                  "locations": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string"
                    },
                    "default": [
                      "FRMRS",
                      "FRVAF"
                    ]
                  },
                  "orders": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "fromIndex": {
                          "type": "integer",
                          "description": "index of the stop where the parcel is loaded.",
                          "default": 1
                        },
                        "toIndex": {
                          "type": "integer",
                          "description": "index of the stop where the parcel is unloaded.",
                          "default": 2
                        },
                        "weight": {
                          "type": "number",
                          "description": "weight (in kg) of the parcel",
                          "default": 1000
                        },
                        "id": {
                          "type": "string",
                          "description": "identifier of the booking (can be an external reference)",
                          "default": "ABC1234"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "PARCEL"
                          ],
                          "default": "PARCEL"
                        }
                      }
                    }
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "road"
                    ],
                    "default": "road"
                  },
                  "details": {
                    "type": "object",
                    "properties": {
                      "fuel": {
                        "type": "string",
                        "description": "fuel type of the truck used during the run.",
                        "enum": [
                          "DIESEL",
                          "PETROL",
                          "LPG"
                        ],
                        "default": "DIESEL"
                      },
                      "truckSize": {
                        "type": "integer",
                        "description": "truck size of the asset (GWV from 4t to 60t)",
                        "default": 34
                      },
                      "carrier": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "scac": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "Request Object with run and parcels"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "metadata": {
                    "customKey1": "customValue1",
                    "customKey2": "customValue2"
                  },
                  "co2e": {
                    "total": 1793887,
                    "wtt": 315591,
                    "ttw": 1478296
                  },
                  "orders": [
                    {
                      "co2e": {
                        "total": 857981,
                        "wtt": 150941,
                        "ttw": 707040,
                        "intensity": 0.1396
                      },
                      "parameters": {
                        "fromIndex": 1,
                        "toIndex": 2,
                        "weight": 12000,
                        "id": "ABC123",
                        "type": "PARCEL"
                      },
                      "properties": {
                        "allocation": 0.48,
                        "distance": 512056
                      }
                    },
                    {
                      "co2e": {
                        "total": 1026274,
                        "wtt": 180548,
                        "ttw": 845726,
                        "intensity": 0.1015
                      },
                      "parameters": {
                        "fromIndex": 2,
                        "toIndex": 3,
                        "weight": 12000,
                        "id": "ABC124",
                        "type": "PARCEL"
                      },
                      "properties": {
                        "allocation": 0.52,
                        "distance": 768399
                      }
                    }
                  ],
                  "parameters": {
                    "locations": {
                      "1": "ESBCN",
                      "2": "FRMRS",
                      "3": "FRGEB"
                    },
                    "details": {
                      "identifier": null,
                      "size": 26,
                      "fuel": "DIESEL",
                      "carrier": {
                        "name": "CARRIER_NAME",
                        "scac": "SCXYZ"
                      }
                    }
                  },
                  "properties": {
                    "allocationMethod": "TRANSPORT_SERVICE_ALLOCATION",
                    "dataType": "MODELED",
                    "distance": 1280414,
                    "emptyRunning": 0.41,
                    "legs": [
                      {
                        "properties": {
                          "from": {
                            "locode": "ESBCN",
                            "coordinates": [
                              2.1541063785553,
                              41.3384418487549
                            ],
                            "city": "Barcelona",
                            "country": "Spain"
                          },
                          "to": {
                            "locode": "FRMRS",
                            "coordinates": [
                              5.34005236625671,
                              43.3317317962646
                            ],
                            "city": "Marseille",
                            "country": "France"
                          },
                          "distance": 512044,
                          "region": "Europe",
                          "loadFactor": 0.6
                        }
                      },
                      {
                        "properties": {
                          "from": {
                            "locode": "FRMRS",
                            "coordinates": [
                              5.34005236625671,
                              43.3317317962646
                            ],
                            "city": "Marseille",
                            "country": "France"
                          },
                          "to": {
                            "locode": "FRGEB",
                            "coordinates": [
                              1.92079,
                              48.4365
                            ],
                            "city": "Garancières-en-Beauce",
                            "country": "France"
                          },
                          "distance": 768370,
                          "region": "Europe",
                          "loadFactor": 0.6
                        }
                      }
                    ],
                    "truck": {
                      "minSize": 26,
                      "maxSize": 32,
                      "identifier": "EURO6",
                      "fuel": "DIESEL"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --location --request POST 'http://api.searoutes.com/asset/v2/run/co2' \\\n--header 'x-api-key: <your-api-key-here>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"metadata\":{\n    \"customKey1\":\"customValue1\",\n    \"customKey2\": \"customValue2\"\n  },\n  \"locations\": [\n    \"ESBCN\",\n    \"FRMRS\",\n    \"FRGEB\"\n  ],\n  \"orders\": [\n    {\n      \"fromIndex\": 1,\n      \"toIndex\": 2,\n      \"weight\": 12000,\n      \"id\": \"ABC123\",\n      \"type\": \"PARCEL\"\n    },\n    {\n      \"fromIndex\": 2,\n      \"toIndex\": 3,\n      \"weight\": 12000,\n      \"id\": \"ABC124\",\n      \"type\": \"PARCEL\"\n    }\n  ],\n  \"mode\": \"road\",\n  \"details\": {\n      \"truckSize\": \"26\",\n      \"fuel\": \"DIESEL\",\n      \"carrier\": {\n        \"name\": \"CARRIER_NAME\",\n        \"scac\": \"SCXYZ\"\n      }\n  }\n}'\n"
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/shipment/v2/report/co2": {
      "post": {
        "operationId": "getCO2ForShipment",
        "tags": [
          "shipment"
        ],
        "summary": "Get CO2 for given shipment",
        "parameters": [
          {
            "name": "generateCertificate",
            "description": "Boolean which controls if certificate is generated for requested shipment.",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "example": false,
              "type": "boolean"
            }
          }
        ],
        "description": "This endpoint computes CO2e emissions (i.e CO2 equivalent emissions) for a given shipment. Shipment API allows you to define multiple route legs with multiple containers or parcels. The response contains CO2e per route leg as well as per order and total CO2e of the shipment.\n\nShipment request is a nested json on the root level, it consists of required properties - `orders`, `legs` and optional properties - `metadata` and `details`.\n\nYou can specify `details` of shipment that will be displayed on the certificate (pdf). The following `details` are allowed: `id`, `referenceNumber`, `status`, `carrier.id`, `carrier.scac`, `carrier.name` and `client.name`. Where `status` can be `BOOKED` or `ARRIVED` and `client.name` is the name of your client. Provided carrier id, name or scac are the only parameters taken into account when computing CO2e. However, `legs[0].details.carrier` id, scac or name will take precedence if has been provided. To be more specific, `/search/v2/carriers` endpoint can be used to retrieve a carrier object by its name or scac and can be used in `details.carrier` or `legs[0].details.carrier`.\n\nYou can define list of `orders` that belong to your shipment with maximum number of 5. All orders must include the `type` value. You can differentiate between container and parcel shipments using different `type` values.\n\nThe different types are `FCL` (or `CONTAINER`), `LCL` and `PARCEL` (with `PALLET` and `UNIT_LOAD` as aliases). \n\nEach order must have at least one of the following properties: `weight` (weight of orders in kg) or `quantity` (number of containers for containerized shipping). You can optionally define `sizeTypeCode` (size and type of your container). \nThe supported values and their meanings are:\n20GP, 22G1, 2200, 22G0, 2202, 2210 (20ft, General purpose (Standard)) [Default]\n40GP, 42G1, 42G0, 40G1 (40ft, General purpose (Standard)), \n40HC, 45G1, 45G0, 4500, 4510 (40ft High cube, General Purpose),\n22R1, 2231 (20ft, Reefer),\n40NOR, 42R1, 4531 (40ft, Reefer),\n40REHC, 45R1, 45R8 (40ft High cube, Reefer),\n53GP (53ft High cube).\nYou can also optionally provide `id` of your order.\n\nField `legs` is a list of routes that are part of the shipment. Maximum number of legs is 10.\nEach _leg_ requires `from` and `to` (origin and destination). The value could be coordinates `\"59.11;6.14\"` or a string that could be geolocated `\"hamburg\"`.\nEach _leg_ requires a `mode`. The following modes are supported: `sea`, `road`, `rail`, `inland-water` and `air`.\nEach _leg_ can have an optional `details`. For all _modes_ you can specify `dateTime` with `arrival` and `departure` properties in ISO_8601 format, preferrably with timezone `YYYY-MM-DDTHH-mm-ssTZD` (`2022-02-22T15:00:00+01:00`). if you want to use different distance than the one we calculate you can specify optional `distance` property.\n- For **mode sea** you can specify `details.voyageNumber` and `details.vessel`. Object `vessel` has two properties `name` and `imo`. Specifying `imo` of the `vessel` increases accuracy of CO2e values. Different way of improving accuracy of CO2e values is defining a carrier or `details.fuelType`. You can define `details.carrier.id`, `details.carrier.name` or `details.carrier.scac` per leg. In this case, you receive CO2e values that are calculated as average values of all the itineraries for given carrier on given route. If you define `details.carrier.scac` you are required to use UNLOCODES for origin (`from`) and destination (`to`) of your leg. Passing coordinates or location string will not pass our validation. If you provide both a vessel imo and a carrier id, scac or name the imo will take the precedence over the carrier.\n\n- For **modes road and rail** you can specify `details.fuelType` to get a more accurate CO2e. Furthermore, you can specify `details.truckSize` (integer) for mode `road`. If you don't pass the trucksize we will choose appropriate truckSize for you. To improve accuracy of CO2e values for mode `road` you can define `details.carrier.id`, `details.carrier.name` or `details.carrier.scac`. This works only for North America region and the computation uses SmartWay carrier data (Dray (CONTAINER) and Mix (AVERAGE_MIXED)). If the SCAC passed is not valid or we don't have enough data to compute CO2e, the computation will be based on GLEC defaults.\n\n- For **mode inland-water** you can specify `vesselType` with one of the following values: `MOTOR_VESSEL`, `COUPLED_CONVOY`, `PUSHED_CONVOY`, `CONTAINER_VESSEL_110`, `CONTAINER_VESSEL_135` or `CONTAINER_COUPLED`. Default value is `MOTOR_VESSEL.`\n\n- For **mode air** you can specify `details.aircraft` with two optional properties: `iata` (IATA designator of the aircraft type) and `type` (either `PASSENGER` or `CARGO`). `air` mode can be used only for LCL shipment\n\nEach _leg_ can have optional `metadata`. You can add any information you want to `metadata` object and it will be returned to you in the response. Contents of `metadata` do not influence CO2e calculation.\n\nYou can generate a certificate document (pdf) by setting the optional query parameter `generateCertificate` to `true`.\n\n### Hubs\n\nLogistics hubs are locations where freight is stored and processed, and handled from one vehicle or transport mode to another.\n\nHubs are an integral part of a shipment transport flow, and as such, their impact is not to be overlooked. Our Shipment API allows you to define hubs for your shipment. You can define hub as a leg with mode `hub`. This type of leg does not have common leg properties which we mentioned above. You can define `detail` object with property `hubType`. HubType must be one of the following value: `WAREHOUSE`, `TRANSHIPMENT_SITE`, `STORAGE_TRANSHIPMENT`, `LIQUID_BULK_TERMINAL`, `MARITIME_CONTAINER_TERMINAL`. \n\nThis is an example of such a leg:\n```JSON \n... \n{ \n  \"mode\": \"hub\", \n  \"details\": { \n    \"hubType\": \"TRANSHIPMENT_SITE\"\n    }\n} \n... \n```\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n\n### Container shipment\n\nFor a container shipment the `type` of `orders` is required. The type can be `CONTAINER`, `FCL` or `LCL`. Result depends on `sizeTypeCode` and `quantity` of `orders` (1 by default), and if you provide the `weight` of the goods, this value will take priority over the `quantity` for the CO2 calculation in road and rail but also in sea and inland waters mode for LCL only.\nSee list of available `sizeTypeCodes` above. Container shipment cannot be used in combination with `air` transport. \n        \nExample of defined orders for container shipment:\n\n```JSON\n\"orders\": [{\n  \"type\": \"CONTAINER\",\n  \"quantity\": 2,\n}, {\n  \"type\": \"CONTAINER\",\n  \"quantity\": 1,\n  \"sizeTypeCode\": \"40GP\"\n}]\n```\n\n### Parcel shipment\n\nFor a parcel shipment the `weight` of `orders` and `type` are required. See list of available parcel aliases above. Defining `quantity` of `orders` makes the request a container shipment.\n\nExample of defined order for parcel shipment:\n\n```JSON\norders: [{\n  type: \"PALLET\",\n  weight: 7000, // in kilograms\n}]\n```\n\n## Response\n\nThe response contains `parameters` object which consist of `orders` and `type` specified in the request. `co2e` object stands for CO2e of entire shipment. You can also find `co2e` object in each `leg`. It has following properties: `co2e.total` (value in grams), `co2e.ttw` (Tank to Wheel - value in grams), `co2e.wtt` (Well to Tank - value in grams) and `co2e.intensity` (value in Kg CO2e / t.km). \n\nLegs also have `properties` field with data that were used to compute CO2e. You can find common properties for all leg - order CO2e requests in the root of the properties and order specific data in particular order object for instance `properties.orders[0]`. Each order contains CO2e object and has a common structure accross the whole shipment which is located in `legs[0].properties.orders[0].co2e`. `Parameters` property inside a leg holds `details` that were used in the request. `from` and `to` are objects containing `coordinates`, `locode` (if exists), `country` and `city`.\n\nThe `certificateUrl` is where you can download certificate for your shipment in pdf format. We recommend saving this pdf right after receiving the response.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "orders",
                  "legs"
                ],
                "properties": {
                  "metadata": {
                    "type": "object"
                  },
                  "details": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "We recommend to use this parameter instead of `shipmentId` (deprecated)",
                        "example": "AD35736"
                      },
                      "referenceNumber": {
                        "type": "string",
                        "description": "We recommend to use this parameter instead of `bookingNumber` (deprecated)",
                        "example": "304i93424"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "BOOKED",
                          "ARRIVED"
                        ],
                        "example": "BOOKED"
                      },
                      "carrier": {
                        "type": "object",
                        "properties": {
                          "scac": {
                            "type": "string",
                            "example": "SCAC"
                          },
                          "name": {
                            "type": "string",
                            "example": "My carrier"
                          }
                        }
                      },
                      "client": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Client"
                          }
                        }
                      },
                      "shipmentId": {
                        "type": "string",
                        "deprecated": true,
                        "description": "We recommend to use the parameter `id` instead.",
                        "example": "AD35736"
                      },
                      "bookingNumber": {
                        "type": "string",
                        "deprecated": true,
                        "description": "We recommend to use the parameter `referenceNumber` instead.",
                        "example": "304i93424"
                      }
                    }
                  },
                  "orders": {
                    "type": "array",
                    "description": "We recommend to use this parameter instead of `containers` (deprecated). Maximum amount of orders is 5.",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "CONTAINER",
                            "PARCEL",
                            "FCL",
                            "LCL",
                            "PALLET",
                            "UNIT_LOAD"
                          ],
                          "default": "CONTAINER"
                        },
                        "sizeTypeCode": {
                          "type": "string",
                          "enum": [
                            "20GP",
                            "22G1",
                            "2200",
                            "22G0",
                            "2202",
                            "2210",
                            "40GP",
                            "42G1",
                            "42G0",
                            "40G1",
                            "40HC",
                            "45G1",
                            "4500",
                            "45G0",
                            "22R1",
                            "2231",
                            "42R1",
                            "4531",
                            "40NOR",
                            "45R1",
                            "45R8",
                            "40REHC",
                            "53GP"
                          ]
                        },
                        "quantity": {
                          "type": "number",
                          "default": 1
                        },
                        "weight": {
                          "type": "number",
                          "default": 300
                        },
                        "id": {
                          "type": "string",
                          "example": "OD45782"
                        }
                      }
                    }
                  },
                  "legs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "from",
                            "to",
                            "mode"
                          ],
                          "properties": {
                            "from": {
                              "type": "string",
                              "example": "FRMRS",
                              "default": "FRMRS"
                            },
                            "to": {
                              "type": "string",
                              "example": "DEHAM",
                              "default": "DEHAM"
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "road"
                              ],
                              "example": "road",
                              "default": "road"
                            },
                            "details": {
                              "type": "object",
                              "properties": {
                                "truckSize": {
                                  "type": "integer"
                                },
                                "fuelType": {
                                  "type": "string",
                                  "enum": [
                                    "DIESEL",
                                    "CNG",
                                    "LNG",
                                    "PETROL",
                                    "HVO",
                                    "ELEC",
                                    "LPG",
                                    "BIOLNG",
                                    "BIOCNG",
                                    "HYDROGEN_GASEOUS_FCV",
                                    "BIODIESEL",
                                    "DIESEL99_BIODIESEL1",
                                    "DIESEL98_BIODIESEL2",
                                    "DIESEL95_BIODIESEL5",
                                    "DIESEL93_BIODIESEL7",
                                    "DIESEL90_BIODIESEL10",
                                    "DIESEL80_BIODIESEL20",
                                    "DIESEL50_BIODIESEL50"
                                  ]
                                },
                                "fuel": {
                                  "type": "string",
                                  "example": "DIESEL",
                                  "deprecated": true,
                                  "description": "We recommend to use the parameter `fuelType` instead"
                                },
                                "distance": {
                                  "type": "number"
                                },
                                "carrier": {
                                  "type": "object",
                                  "properties": {
                                    "scac": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "dateTime": {
                                  "type": "object",
                                  "properties": {
                                    "departure": {
                                      "format": "date-time",
                                      "example": "2022-02-24T18:00:00+01:00"
                                    },
                                    "arrival": {
                                      "format": "date-time",
                                      "example": "2022-02-22T15:00:00+01:00"
                                    }
                                  }
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "from",
                            "to",
                            "mode"
                          ],
                          "properties": {
                            "from": {
                              "type": "string",
                              "example": "-73.768741607666,45.4261722564697",
                              "default": "-73.768741607666,45.4261722564697"
                            },
                            "to": {
                              "type": "string",
                              "example": "DEHAM",
                              "default": "DEHAM"
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "sea"
                              ],
                              "example": "sea",
                              "default": "sea"
                            },
                            "details": {
                              "type": "object",
                              "properties": {
                                "voyageNumber": {
                                  "type": "string"
                                },
                                "carrier": {
                                  "type": "object",
                                  "properties": {
                                    "scac": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "vessel": {
                                  "type": "object",
                                  "properties": {
                                    "imo": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "fuelType": {
                                  "type": "string",
                                  "enum": [
                                    "HFO",
                                    "VLSFO",
                                    "ULSFO",
                                    "MDO",
                                    "MGO",
                                    "LNG",
                                    "BIOLNG",
                                    "LSMGO",
                                    "METHANOL",
                                    "BIOMETHANOL",
                                    "IFO380",
                                    "LNG_CMACGM_VAS",
                                    "UCO",
                                    "METHANOL_COAL",
                                    "METHANOL_GAS",
                                    "METHANOL_RENEWABLES"
                                  ]
                                },
                                "distance": {
                                  "type": "number"
                                },
                                "dateTime": {
                                  "type": "object",
                                  "properties": {
                                    "departure": {
                                      "format": "date-time"
                                    },
                                    "arrival": {
                                      "format": "date-time"
                                    }
                                  }
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "from",
                            "to",
                            "mode"
                          ],
                          "properties": {
                            "from": {
                              "type": "string",
                              "example": "-73.768741607666,45.4261722564697",
                              "default": "-73.768741607666,45.4261722564697"
                            },
                            "to": {
                              "type": "string",
                              "example": "DEHAM",
                              "default": "DEHAM"
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "rail"
                              ],
                              "example": "rail",
                              "default": "rail"
                            },
                            "details": {
                              "type": "object",
                              "properties": {
                                "fuelType": {
                                  "type": "string",
                                  "enum": [
                                    "ELEC",
                                    "DIESEL",
                                    "DEFAULT"
                                  ]
                                },
                                "fuel": {
                                  "type": "string",
                                  "example": "DIESEL",
                                  "deprecated": true,
                                  "description": "We recommend to use the parameter `fuelType` instead"
                                },
                                "distance": {
                                  "type": "number"
                                },
                                "dateTime": {
                                  "type": "object",
                                  "properties": {
                                    "departure": {
                                      "format": "date-time"
                                    },
                                    "arrival": {
                                      "format": "date-time"
                                    }
                                  }
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "from",
                            "to",
                            "mode"
                          ],
                          "properties": {
                            "from": {
                              "type": "string",
                              "example": "SKBTS",
                              "default": "SKBTS"
                            },
                            "to": {
                              "type": "string",
                              "example": "DEHAM",
                              "default": "DEHAM"
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "inland-water"
                              ],
                              "example": "inland-water",
                              "default": "inland-water"
                            },
                            "details": {
                              "type": "object",
                              "properties": {
                                "vesselType": {
                                  "type": "string",
                                  "enum": [
                                    "MOTOR_VESSEL",
                                    "COUPLED_CONVOY",
                                    "PUSHED_CONVOY",
                                    "CONTAINER_VESSEL_110",
                                    "CONTAINER_VESSEL_135",
                                    "CONTAINER_COUPLED"
                                  ],
                                  "default": "MOTOR_VESSEL",
                                  "example": "MOTOR_VESSEL"
                                },
                                "distance": {
                                  "type": "number"
                                },
                                "dateTime": {
                                  "type": "object",
                                  "properties": {
                                    "departure": {
                                      "format": "date-time"
                                    },
                                    "arrival": {
                                      "format": "date-time"
                                    }
                                  }
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "from",
                            "to",
                            "mode"
                          ],
                          "properties": {
                            "from": {
                              "type": "string",
                              "example": "FRMRS",
                              "default": "FRMRS"
                            },
                            "to": {
                              "type": "string",
                              "example": "DEHAM",
                              "default": "DEHAM"
                            },
                            "mode": {
                              "type": "string",
                              "enum": [
                                "air"
                              ],
                              "example": "air",
                              "default": "air"
                            },
                            "details": {
                              "type": "object",
                              "properties": {
                                "aircraft": {
                                  "type": "object",
                                  "properties": {
                                    "iata": {
                                      "type": "string",
                                      "default": "74Y",
                                      "example": "74Y"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "CARGO",
                                        "PASSENGER"
                                      ],
                                      "default": "CARGO",
                                      "example": "CARGO"
                                    }
                                  }
                                },
                                "distance": {
                                  "type": "number"
                                },
                                "dateTime": {
                                  "type": "object",
                                  "properties": {
                                    "departure": {
                                      "format": "date-time"
                                    },
                                    "arrival": {
                                      "format": "date-time"
                                    }
                                  }
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "mode",
                            "details"
                          ],
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": [
                                "hub"
                              ],
                              "example": "hub",
                              "default": "hub"
                            },
                            "details": {
                              "type": "object",
                              "required": [
                                "hubType"
                              ],
                              "properties": {
                                "hubType": {
                                  "type": "string",
                                  "enum": [
                                    "WAREHOUSE",
                                    "TRANSHIPMENT_SITE",
                                    "STORAGE_TRANSHIPMENT",
                                    "LIQUID_BULK_TERMINAL",
                                    "MARITIME_CONTAINER_TERMINAL"
                                  ]
                                }
                              }
                            },
                            "metadata": {
                              "type": "object"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "containers": {
                    "type": "array",
                    "deprecated": true,
                    "description": "We recommend to use the parameter `bookings` instead.",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "sizeTypeCode": {
                          "type": "string",
                          "enum": [
                            "20GP",
                            "22G1",
                            "2200",
                            "22G0",
                            "2202",
                            "2210",
                            "40GP",
                            "42G1",
                            "42G0",
                            "40G1",
                            "40HC",
                            "45G1",
                            "4500",
                            "45G0",
                            "22R1",
                            "2231",
                            "42R1",
                            "4531",
                            "40NOR",
                            "45R1",
                            "45R8",
                            "40REHC",
                            "53GP"
                          ]
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "weight": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "deprecated": true,
                    "enum": [
                      "CONTAINER"
                    ],
                    "default": "CONTAINER"
                  }
                }
              }
            }
          },
          "description": "Request Object with shipment and legs"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "parameters": {
                    "orders": [
                      {
                        "weight": 10000,
                        "quantity": 1,
                        "sizeTypeCode": "20GP",
                        "type": "CONTAINER",
                        "id": "OD34532"
                      }
                    ],
                    "details": {
                      "shipmentId": "AB212",
                      "referenceNumber": "3532313",
                      "status": "BOOKED",
                      "client": {
                        "name": "Client name."
                      },
                      "carrier": {
                        "name": "Carrier name",
                        "scac": "scac"
                      }
                    }
                  },
                  "co2e": {
                    "total": 3296455,
                    "wtt": 419244,
                    "ttw": 2877211,
                    "intensity": 0.03
                  },
                  "legs": [
                    {
                      "from": {
                        "locode": "CLSAI",
                        "coordinates": [
                          -71.6186943054199,
                          -33.5886058807373
                        ],
                        "city": "San Antonio",
                        "country": "Chile"
                      },
                      "to": {
                        "locode": "PAMIT",
                        "coordinates": [
                          -79.8831903934479,
                          9.36146351865689
                        ],
                        "city": "Manzanillo",
                        "country": "Panama"
                      },
                      "mode": "sea",
                      "parameters": {
                        "details": {
                          "dateTime": {
                            "departure": "2022-02-22T15:00:00Z"
                          }
                        }
                      },
                      "properties": {
                        "orders": [
                          {
                            "type": "CONTAINER",
                            "quantity": 1,
                            "weight": 10000,
                            "sizeTypeCode": "20GP",
                            "id": "OD34532",
                            "nTEU": 1,
                            "co2e": {
                              "total": 597609,
                              "wtt": 45197,
                              "ttw": 552412,
                              "intensity": 0.0119
                            }
                          }
                        ],
                        "dataType": "DEFAULT",
                        "distance": 5021925,
                        "secaIntersection": 0,
                        "vessel": {
                          "imo": null,
                          "name": "Intra South America GLEC Representative Vessel",
                          "minTEU": null,
                          "maxTEU": null
                        },
                        "tradeLane": "Intra South America"
                      },
                      "co2e": {
                        "total": 597609,
                        "wtt": 45197,
                        "ttw": 552412,
                        "intensity": 0.0119
                      }
                    },
                    {
                      "from": {
                        "locode": "USNYC",
                        "coordinates": [
                          -74.0896444102304,
                          40.6637868432737
                        ],
                        "city": "New York",
                        "country": "United States"
                      },
                      "to": {
                        "locode": "USCHI",
                        "coordinates": [
                          -87.6101792055955,
                          41.7542807805185
                        ],
                        "city": "Chicago",
                        "country": "United States"
                      },
                      "mode": "road",
                      "parameters": {
                        "details": {
                          "dateTime": {
                            "arrival": "2022-02-28T15:00:00+01:00",
                            "departure": "2022-02-22T15:00:00+01:00"
                          }
                        }
                      },
                      "properties": {
                        "orders": [
                          {
                            "type": "CONTAINER",
                            "weight": 10000,
                            "quantity": 1,
                            "sizeTypeCode": "20GP",
                            "id": "OD34532",
                            "co2e": {
                              "total": 597609,
                              "wtt": 45197,
                              "ttw": 552412,
                              "intensity": 0.0119
                            }
                          }
                        ],
                        "dataType": "DEFAULT",
                        "distance": 1255910,
                        "carrierScac": null,
                        "region": "North America",
                        "truck": {
                          "minSize": null,
                          "maxSize": null,
                          "loadFactor": null,
                          "emptyRunning": null,
                          "combinedEmptyRunningLoadFactor": null
                        }
                      },
                      "co2e": {
                        "total": 1044917,
                        "wtt": 178339,
                        "ttw": 866578,
                        "intensity": 0.0832
                      }
                    },
                    {
                      "from": {
                        "locode": "USCHI",
                        "coordinates": [
                          -87.6101792055955,
                          41.7542807805185
                        ],
                        "city": "Chicago",
                        "country": "United States"
                      },
                      "to": {
                        "locode": "FRMRS",
                        "coordinates": [
                          5.34005236625671,
                          43.3317317962646
                        ],
                        "city": "Marseille",
                        "country": "France"
                      },
                      "mode": "sea",
                      "parameters": {
                        "details": {
                          "dateTime": {
                            "arrival": "2022-02-25T15:00:00+04:00"
                          }
                        }
                      },
                      "properties": {
                        "orders": [
                          {
                            "type": "CONTAINER",
                            "weight": 10000,
                            "quantity": 1,
                            "sizeTypeCode": "20GP",
                            "nTEU": 1,
                            "id": "OD34532",
                            "co2e": {
                              "total": 597609,
                              "wtt": 45197,
                              "ttw": 552412,
                              "intensity": 0.0119
                            }
                          }
                        ],
                        "dataType": "DEFAULT",
                        "distance": 9357621,
                        "secaIntersection": 4182380,
                        "vessel": {
                          "imo": null,
                          "name": "Mediterranean to-from North America EC GLEC Representative Vessel",
                          "minTEU": null,
                          "maxTEU": null
                        },
                        "tradeLane": "Mediterranean to-from North America EC"
                      },
                      "co2e": {
                        "total": 832828,
                        "wtt": 65503,
                        "ttw": 767325,
                        "intensity": 0.0089
                      }
                    },
                    {
                      "from": {
                        "locode": "DEHAM",
                        "coordinates": [
                          9.93855,
                          53.519272
                        ],
                        "city": "Hamburg",
                        "country": "Germany"
                      },
                      "to": {
                        "locode": "FRMRS",
                        "coordinates": [
                          5.34005236625671,
                          43.3317317962646
                        ],
                        "city": "Marseille",
                        "country": "France"
                      },
                      "mode": "rail",
                      "parameters": {
                        "details": {
                          "dateTime": {
                            "arrival": "2022-02-25T15:00:00+04:00"
                          }
                        }
                      },
                      "properties": {
                        "orders": [
                          {
                            "type": "CONTAINER",
                            "weight": 10000,
                            "quantity": 1,
                            "containerSizeTypeCode": "20GP",
                            "id": "OD34532",
                            "co2e": {
                              "total": 597609,
                              "wtt": 45197,
                              "ttw": 552412,
                              "intensity": 0.0119
                            }
                          }
                        ],
                        "dataType": "DEFAULT",
                        "distance": 1559137,
                        "region": "Europe"
                      },
                      "co2e": {
                        "total": 265054,
                        "wtt": 31183,
                        "ttw": 233871,
                        "intensity": 0.017
                      }
                    },
                    {
                      "from": {
                        "locode": "DEHAM",
                        "coordinates": [
                          9.93855,
                          53.519272
                        ],
                        "city": "Hamburg",
                        "country": "Germany"
                      },
                      "to": {
                        "locode": "SKBTS",
                        "coordinates": [
                          17.1304991306235,
                          48.1354281817465
                        ],
                        "city": "Bratislava",
                        "country": "Slovakia"
                      },
                      "mode": "inland-water",
                      "parameters": {},
                      "properties": {
                        "orders": [
                          {
                            "type": "CONTAINER",
                            "weight": 10000,
                            "quantity": 1,
                            "sizeTypeCode": "20GP",
                            "id": "OD34532",
                            "co2e": {
                              "total": 597609,
                              "wtt": 45197,
                              "ttw": 552412,
                              "intensity": 0.0119
                            }
                          }
                        ],
                        "dataType": "DEFAULT",
                        "distance": 1904270,
                        "vessel": {
                          "vesselType": "MOTOR_VESSEL",
                          "minTonnage": 0,
                          "maxTonnage": 1000,
                          "combinedEmptyRunningLoadFactor": 0.55,
                          "fuel": "DIESEL",
                          "nBarges": null
                        }
                      },
                      "co2e": {
                        "total": 556047,
                        "wtt": 99022,
                        "ttw": 457025,
                        "intensity": 0.0292
                      }
                    }
                  ],
                  "certificateUrl": "http://api.searoutes.com/shipment/v2/report/co2/431fef86-e080-445f-b731-bf483f2f2bdb/certificate.pdf"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1654787251207,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "3000"
                  ],
                  "messages": [
                    "type must be one of the following values: CONTAINER"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1654787322153,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "3000"
                  ],
                  "messages": [
                    "We couldn't find location: {location}"
                  ]
                }
              }
            }
          },
          "418": {
            "description": "Multiple errors",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1654787894508,
                  "status": 418,
                  "error": "Multiple errors",
                  "errorCodes": [
                    "3140",
                    "1090"
                  ],
                  "messages": [
                    "IMO number must be a 7-digits number",
                    "Origin and destination should be in the same region. Supported regions for Road are : Europe, North America, South America, Africa and Asia "
                  ]
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl --location --request POST 'http://api.searoutes.com/shipment/v2/report/co2' \\\n--header 'x-api-key: <your-api-key-here>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"type\":\"CONTAINER\",\n    \"orders\":[\n        {\n          \"type\": \"CONTAINER\",\n          \"containerSizeType\":\"20GP\",\n          \"weight\":300\n        }\n    ],\n   \"legs\":[\n      {\n         \"from\":\"-73.768741607666,45.4261722564697\",\n         \"to\":\"FRMRS\",\n         \"mode\":\"sea\"\n      },\n      {\n         \"from\":\"FRMRS\",\n         \"to\":\"DEHAM\",\n         \"mode\":\"road\"\n      }\n   ]\n}'\n"
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/co2/v2/direct/sea": {
      "get": {
        "operationId": "getCO2ForVessel",
        "tags": [
          "co2"
        ],
        "summary": "Get CO2 for a given vessel",
        "description": "This endpoint returns CO2e emissions (i.e CO2 equivalent emissions) in grams (g) for the shortest path between a port of origin (from) and a port of destination (to). \n\n### Origin and destination \n\nYou must provide either `fromLocode` or `fromCoordinates` for the origin and either `toLocode` or `toCoordinates` for the destination.\nYou can use the parameter `distance` (in meters) to pass your own distance (the origin and destination remain mandatory because the co2 computation is region dependent).        \n\n### Vessel information\n\nYou can obtain accurate CO2 values for a specific vessel by passing its IMO as a query parameter. If we cannnot find enough data on the IMO you passed as a parameter, if you pass a wrong IMO number or if you pass no IMO, we estimate the CO2e emissions based on the trade lane (with 30 trade lanes supported) using the GLEC coefficients.\n\n#### Fuel types\n\nWhen a vessel IMO number is provided, we use its fuel type for emission factors, taking into account if necessary fuel switches within SECA zones (ie VLSFO -> LSMDO). \nPresence of a scrubber is also taken into account for emissions within SECA zones.\n\nIf the fuel type for the vessel is missing from our dataset, we will use VLSFO as default value since it is IMO 2020 compatible. The optional customer parameter `fuelType` will overwrite the vessel’s default fuel if it is physically compatible with the structure of the vessel. \nFor example, ULSFO or UCO for ships running on HFO, or VLSFO or BIOLNG for LNG ships using dual engines will be taken into account, but METHANOL for a HFO vessel will not. \nThe fuel type taken into account for CO2 calculation is specified in the response (`fuelType` in properties).\n\nWhen no IMO number is provided, the response will use GLEC emission factors and `fuelType` parameter will not have an impact on the result.\n\n### Cargo specifications (container only)\n\nWe provide CO2 calculation for FCL and LCL. We support dry and reefer container types (`containerSizeTypeCode`). \nThe following types are supported by our API :\n20GP, 22G1, 2200, 22G0, 2202, 2210 (20ft, General purpose (Standard)) [Default]\n40GP, 42G1, 42G0, 40G1 (40ft, General purpose (Standard)), \n40HC, 45G1, 45G0, 4500, 4510 (40ft High cube, General Purpose),\n22R1, 2231 (20ft, Reefer),\n40NOR, 42R1, 4531 (40ft, Reefer),\n40REHC, 45R1, 45R8 (40ft High cube, Reefer),\n53GP (53ft High cube).\n\n\n### Routing parameters\n\n#### Avoid zones\n\nECA zones can be avoided by using the parameter `avoidSeca`. In that case, the distance travelled in the ECA zone is minimized.\nThe HRA (high risk area) zone can be avoided using parameter `avoidHRA`. If no points from the query are in the HRA zones, the zone will be totally avoided, if at least one point is in the HRA zone, the route will go through it but minimize the distance navigated in it.\n\n#### Ice areas and block areas\n\nBy default, the seas that are difficult to sail due to the presence of ice are not allowed (for example the Bering Sea, the Northern Sea Route, etc). You can allow the route to go through these zones by using the `allowIceAreas` parameter.\nIt is possible to block some areas by using the parameter `blockAreas` which takes a list of ids (Panama Canal : 11112 , Suez Canal : 11117). In that case, the route won't cross the areas blocked.\n\n### Impact of the weight and number of containers on CO2e emissions and intensity calculation\n\n#### For CO2e emissions:\nThe CO2e emissions only depend on the number of containers (`nContainers`). If you don't know the `nContainers` but you know the total weight of the goods, our algorithm will estimate the `nContainers` based on the `weight`. \nIf neither `nContainers` nor `weight` are provided, by default, we return emissions for one TEU (20G1, Dry).\n\n#### For CO2e intensity:\nThe CO2e intensity depends on the `weight`. If you don't know the `weight` but you know the `nContainers`, our algorithm will estimate the `weight` based on the `nContainers`.\n\n*Note that you can give a non integer number of containers that allows you to calculate CO2e for LCL.*\n\n\n### Response\n\nThe response contains CO2e WTW (well-to-wheels) emissions in grams (g) for the shortest route between origin and destination ports. We also provide detailed emissions with TTW (tank-to-wheels) emissions and WTT (well-to-tank) emissions. The method takes into account the emissions caused by the fuel consumption of the main engines, the auxiliary engines and the boilers.\n\nThe response also returns the intensity factor (kg of CO2e per ton.kilometer) which is calculated based on the CO2e WTW, distance and the weight provided. If no weight has been provided, we estimate the weight based on the number of containers and their type (`weight` in `properties`)  \n\nThe `parameters` field in the response contains all the parameters that were given in the request.\n\nThe `properties` field in the response gives some data that was used to calculate the CO2 based on the parameters for example the distance, the distance in ECA zones, some data about the vessel, the trade lane, etc. The property `dataType` precise if the data used to calculate the CO2 emissions is `default` data (representative of average operating practices) or `modeled` data (taking into account vehicle information).\n\nNote that the distance we use to calculate CO2e is 15% higher than the shortest distance (returned in the response in meters (m)) as recommended by the GLEC framework to take into account the stops in other ports, the weather and all other deviations from the shortest route.\n\n### Methodology references\n\nThe method used to calculate emissions is based on the following references: \n- Third IMO Greenhouse Gas Study 2014;\n- Fourth IMO Greenhouse Gas Study 2020;\n- EMEP/EEA air pollutant emission inventory guidebook 2019;\n- GLEC Framework 2020.\n",
        "parameters": [
          {
            "name": "fromLocode",
            "description": "The UNLOCODE of the departure port.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "FRMRS",
              "example": "FRMRS",
              "type": "string"
            }
          },
          {
            "name": "fromCoordinates",
            "description": "The coordinates of the departure port given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5.34005236625671,43.3317317962646"
            }
          },
          {
            "name": "toLocode",
            "description": "The UNLOCODE of the arrival port.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "HKHKG",
              "example": "HKHKG",
              "type": "string"
            }
          },
          {
            "name": "toCoordinates",
            "description": "The coordinates of the arrival port given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "114.128887176514,22.3508024215698"
            }
          },
          {
            "name": "distance",
            "description": "Your own computed distance (if known) in meters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 564575
            }
          },
          {
            "name": "vesselImo",
            "description": "The IMO number of the vessel.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 9776418,
              "type": "integer"
            }
          },
          {
            "name": "allowIceAreas",
            "description": "Specifies if sailing in ice areas (Northern Sea route, deep South Pacific, deep South Atlantic, Bering Sea, etc) is possible.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "avoidHRA",
            "description": "Specifies if travel in HRA zone should be avoided",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "avoidSeca",
            "description": "Specifies if travel in SECA zones should be avoided",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "blockAreas",
            "description": "Specifies a particular area to block, or a list of areas to block (separated by `,`). Area Ids can be found using the [/geocoding/area/{name}](#operation/getGeocodingArea) endpoint.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 11112,
              "type": "integer"
            }
          },
          {
            "name": "nContainers",
            "description": "The number of shipped containers.",
            "in": "query",
            "required": false,
            "schema": {
              "default": 1,
              "example": 2.5,
              "type": "number"
            }
          },
          {
            "name": "containerSizeTypeCode",
            "description": "Code to identify the size and the type of the container. 20GP, 22G1, 2200, 22G0, 2202, 2210, 40GP, 42G1, 42G0, 40G1, 40HC, 45G1, 4500, 45G0, 22R1, 2231, 42R1, 4531, 40NOR, 45R1, 45R8, 40REHC, 53GP. We recommend to use this parameter instead of `containerType` and `containerSize`(deprecated)",
            "in": "query",
            "required": false,
            "schema": {
              "example": "20GP",
              "type": "string"
            }
          },
          {
            "name": "containerSize",
            "deprecated": true,
            "description": "The size in foot of containers (either 20, 40 of 45). We recommend to use the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "type": "integer"
            }
          },
          {
            "name": "containerType",
            "deprecated": true,
            "description": "The type of the containers (either STANDARD or HIGH_CUBE). Default depends on the size of the containers (STANDARD for 20ft, HIGH_CUBE for 40ft and 45ft). We recommend to use the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "STANDARD",
              "type": "string"
            }
          },
          {
            "name": "weight",
            "description": "The weight of shipped goods in kilograms in case the number of containers is unknown.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 8000,
              "type": "number"
            }
          },
          {
            "name": "volume",
            "description": "The volume of shipped goods in cube meters in case the number of containers is unknown.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "fuelType",
            "description": "The fuel type to take into account for the vessel (can be HFO, VLSFO, ULSFO, MDO, MGO, LNG, BIOLNG, LSMGO, METHANOL, BIOMETHANOL, IFO380, LNG_CMACGM_VAS, UCO, METHANOL_COAL, METHANOL_GAS, METHANOL_RENEWABLES).",
            "in": "query",
            "required": false,
            "schema": {
              "example": "VLSFO",
              "type": "string"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/co2/v2/direct/sea?vesselImo=9695169&fromLocode=FRFOS&toLocode=INMUN \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "co2e": {
                    "total": 415665,
                    "wtt": 31693,
                    "ttw": 383972,
                    "intensity": 0.0049
                  },
                  "parameters": {
                    "mode": "SEA",
                    "from": {
                      "locode": "FRFOS",
                      "coordinates": null
                    },
                    "to": {
                      "locode": "INMUN",
                      "coordinates": null
                    },
                    "containerSize": null,
                    "containerType": null,
                    "containerSizeTypeCode": null,
                    "weight": null,
                    "volume": null,
                    "allowIceAreas": false,
                    "avoidHRA": false,
                    "avoidSeca": false,
                    "blockAreas": [],
                    "vessel": {
                      "imo": 9695169,
                      "fuelType": null
                    },
                    "nContainers": null
                  },
                  "properties": {
                    "dataType": "MODELED",
                    "weight": 10000,
                    "distance": 8469316,
                    "secaIntersection": 0,
                    "containerSizeTypeCode": "20GP",
                    "vessel": {
                      "imo": 9695169,
                      "name": "CSCL ARCTIC OCEAN",
                      "minTEU": 14500,
                      "maxTEU": 19999,
                      "fuelType": "IFO380"
                    },
                    "nTEU": 1,
                    "tradeLane": "Europe to-from Middle East"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1636013442457,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "3110"
                  ],
                  "messages": [
                    "Departure and arrival ports must be given as UNLOCODE"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223051878,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1010"
                  ],
                  "messages": [
                    "Port 'AAAAA' not found."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/co2/v2/direct/air": {
      "get": {
        "operationId": "getCO2ForAircraft",
        "tags": [
          "co2"
        ],
        "summary": "Get CO2 for a given aircraft",
        "description": "This endpoint returns CO2e emissions (i.e CO2 equivalent emissions) in grams (g) for a direct flight between a source airport (origin) and a target airport (destination)\n\n### Origin and destination \n\nYou can pass either a Locode (`fromLocode`, `toLocode`), coordinates (`fromCoordinates`, `toCoordinates`) or a IATA airport code (`fromIata`, `toIata`) to specify the origin and the destination.\nYou can use the parameter `distance` (in meters) to pass your own distance (the origin and destination remain mandatory because the co2 computation is region dependent).\n\n### Aircraft and methodology \n\nYou can either pass an aircraft IATA code to get the CO2 emissions of this specific aircraft or only the aircraft type. In case the IATA code is given, the emissions are calculated using EEA/EMEP methodology and EUROCONTROL data. They take into account take-off, landing, climbing, descent and cruising phases. In case the aircraft IATA is not given, we use the GLEC emission factors based on the length (short, medium, long haul) of the flight and the aircraft type (passenger, cargo or unknown).\n\n### Weight \n\nYou can pass the weight of the goods carried (in kg). The default weight is 1000 kg (1 metric ton)\n\n### Response\n\nThe response contains total CO2e WTW emissions and detailed emissions (in grams) : CO2e WTT (well-to-tank) emissions and CO2e TTW (tank-to-wheels) for the amount of goods carried. \n\nThe response also contains the intensify factor (kg of CO2e per ton.kilometer) which is calculated based on the CO2e WTW emissions, the distance and the weight passed.\n\nThe response contains the parameters passed in the request and the used values of the parameters if they were not passed.\n\nThe `properties` field contains useful information about the data that was used for the calculation. For example the name, and model of the aircraft, the distance, etc. The property `dataType` precise if the data used to calculate the CO2 emissions is `default` data (representative of average operating practices) or `modeled` data (taking into account vehicle information).\n\n### Methodology references\n\nThe method uses CO2e emission factors from fuel consumption and distance calculation in accordance with EN 16258.\n",
        "parameters": [
          {
            "name": "fromIata",
            "description": "The IATA code of the departure airport.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "MRS",
              "example": "MRS",
              "type": "string"
            }
          },
          {
            "name": "toIata",
            "description": "The IATA code of the arrival airport.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "YVR",
              "example": "YVR",
              "type": "string"
            }
          },
          {
            "name": "fromLocode",
            "description": "The UNLOCODE of the departure airport.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "FRMRS",
              "type": "string"
            }
          },
          {
            "name": "toLocode",
            "description": "The UNLOCODE of the destination airport.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "CAYVR",
              "type": "string"
            }
          },
          {
            "name": "fromCoordinates",
            "description": "The cordinates of the origin airport.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "5.22142410278,43.439271922",
              "type": "string"
            }
          },
          {
            "name": "toCoordinates",
            "description": "The cordinates of the destination airport.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "-123.183998108,49.193901062",
              "type": "string"
            }
          },
          {
            "name": "distance",
            "description": "Your own computed distance (if known) in meters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 564575
            }
          },
          {
            "name": "aircraftIata",
            "description": "The IATA designator of the aircraft type.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "74Y",
              "type": "string"
            }
          },
          {
            "name": "aircraftType",
            "description": "The type of the aircraft (if no IATA), either `PASSENGER`, `CARGO` or `UNKNOWN` (if unknown, the emissions are calculated as 55% passenger and 45% cargo).",
            "in": "query",
            "required": false,
            "schema": {
              "example": "PASSENGER",
              "type": "string"
            }
          },
          {
            "name": "weight",
            "description": "The weight of shipped goods in kilograms.",
            "in": "query",
            "required": false,
            "schema": {
              "default": 1000,
              "example": 11000,
              "type": "integer"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/co2/v2/direct/air?fromIata=MRS&toIata=YVR&aircraftIata=74Y&weight=11000 \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "co2e": {
                    "total": 51205964,
                    "wtt": 9238189,
                    "ttw": 41967775,
                    "intensity": 0.5384
                  },
                  "parameters": {
                    "mode": "AIR",
                    "from": {
                      "locode": null,
                      "iata": "MRS",
                      "coordinates": null
                    },
                    "to": {
                      "locode": null,
                      "iata": "YVR",
                      "coordinates": null
                    },
                    "weight": 11000,
                    "aircraft": {
                      "iata": "74Y"
                    }
                  },
                  "properties": {
                    "dataType": "MODELED",
                    "distance": 8550824,
                    "aircraft": {
                      "iata": "74Y",
                      "icao": "B744",
                      "manufacturer": "BOEING",
                      "model": "Boeing 747-400 Freighter",
                      "type": "CARGO"
                    },
                    "haul": "LONG",
                    "cargoLoadFactor": 0.7,
                    "passengerLoadFactor": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223208588,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "2020"
                  ],
                  "messages": [
                    "Either coordinates, locode or iata must be given for source and destination"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223418950,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1050"
                  ],
                  "messages": [
                    "Airport with iata code 'ZZZ' not found."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/co2/v2/direct/inland-water": {
      "get": {
        "operationId": "getCO2ForInlandWater",
        "tags": [
          "co2"
        ],
        "summary": "Get CO2 for inland waters",
        "description": "This endpoint returns CO2e emissions (i.e CO2e equivalent emissions) in grams (g) for a voyage from a given inland port to another using the inland waterways network. \n\n### Origin and destination \n\nThe origin and destination ports can be given either as locodes or as coordinates.\nYou must provide either `fromLocode` or `fromCoordinates` and either `toLocode` or `toCoordinates`.\nYou can use the parameter `distance` (in meters) to pass your own distance (the origin and destination remain mandatory because the co2 computation is region dependent).\n\n### Cargo specifications\n\nSeveral parameters allow you to define the specification of the cargo carried : `nContainers`, `containerSizeTypeCode`, `weight`. \nThe following container types are supported by our API :\n20GP, 22G1, 2200, 22G0, 2202, 2210 (20ft, General purpose (Standard)) [Default]\n40GP, 42G1, 42G0, 40G1 (40ft, General purpose (Standard)), \n40HC, 45G1, 45G0, 4500, 4510 (40ft High cube, General Purpose),\n22R1, 2231 (20ft, Reefer),\n40NOR, 42R1, 4531 (40ft, Reefer),\n40REHC, 45R1, 45R8 (40ft High cube, Reefer),\n53GP (53ft High cube).\n\nHere are common use cases : \n\n#### FCL \nuse the parameters `nContainers` and `containerSizeTypeCode`. We recommend to use the parameter `containerSizeTypeCode` to precise the size and type of the containers. We will estimate the weight of the cargi based on the container specifications providesd. \n\n#### LCL \nuse the parameters `weight` in combination with an appropriate `containerTypeSizeCode` (In case of reefer, you can choose 22R1)\n\n#### Default \nUse the parameters `weight` without container specifications. \n\n\n### Vessel \n\nIf known, the type of inland vessel can be given. By default, a motor vessel is always used to compute CO2e (`MOTOR_VESSEL`).\n\n### Response\n\nThe response contains WTT (well-to-tank) and TTW (tank-to-wheels) CO2e emissions in grams (g) for the amount of goods carried. It also contains the intensity factor (kg of CO2e per ton.kilometer) which is calculated from the WTW CO2e emissions, the distance and the weight (in `properties`).\n\nThe response contains a `parameters` field which contains all the parameters that were passed in the query and the default values if some parameters were not passed. \n\nThe response contains a `properties` field which contains the useful information that was used for the calculation, for example the distance of the route calculated. The property `dataType` precises if the data used to calculate the CO2 emissions is `default` data (representative of average operating practices) or `modeled` data (taking into account vehicle information).\n\n### Methodology references\n\nThe emissions are calculated using the GLEC framework.\n",
        "parameters": [
          {
            "name": "fromLocode",
            "description": "The LOCODE of the departure inland port.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "FRLIO",
              "type": "string",
              "example": "FRLIO"
            }
          },
          {
            "name": "fromCoordinates",
            "description": "The coordinates of the departure inland port given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "4.8395635,45.7323"
            }
          },
          {
            "name": "toLocode",
            "description": "The LOCODE code of the arrival inland port.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "FRVAF",
              "example": "FRVAF",
              "type": "string"
            }
          },
          {
            "name": "toCoordinates",
            "description": "The coordinates of the arrival inland port given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "4.88333333333333,44.9333333333333"
            }
          },
          {
            "name": "distance",
            "description": "Your own computed distance (if known) in meters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 564575
            }
          },
          {
            "name": "weight",
            "description": "The weight of shipped goods in kilograms. Default is 1000 kg (1 metric ton). When `nContainers` is passed, the weight is ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 5000,
              "type": "integer"
            }
          },
          {
            "name": "vesselType",
            "description": "The type of inland vessel. Can be `MOTOR_VESSEL`, `COUPLED_CONVOY`, `PUSHED_CONVOY`, `TANKER`, `CONTAINER_VESSEL_110`, `CONTAINER_VESSEL_135` or `CONTAINER_COUPLED`.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "MOTOR_VESSEL",
              "example": "PUSHED_CONVOY",
              "type": "string"
            }
          },
          {
            "name": "nContainers",
            "description": "The number of containers.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 2,
              "type": "integer"
            }
          },
          {
            "name": "containerSizeTypeCode",
            "description": "Code to identify the size and the type of the container. Supported values are 20GP, 22G1, 2200, 22G0, 2202, 2210, 40GP, 42G1, 42G0, 40G1, 40HC, 45G1, 4500, 45G0, 22R1, 2231, 42R1, 4531, 40NOR, 45R1, 45R8, 40REHC, 53GP. We recommend to use this parameter instead of `containerType` and `containerSize`.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "20GP",
              "type": "string"
            }
          },
          {
            "name": "containerSize",
            "deprecated": true,
            "description": "The size of the containers (20, 40 or 45). We recommend to use of the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 40,
              "type": "integer"
            }
          },
          {
            "name": "containerType",
            "deprecated": true,
            "description": "The type of the containers (either STANDARD or HIGH_CUBE). Default is STANDARD. We recommend to use of the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "STANDARD",
              "type": "string"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/co2/v2/direct/inland-water?fromLocode=FRVAF&toLocode=FRLIO \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "co2e": {
                    "total": 3093,
                    "wtt": 551,
                    "ttw": 2542,
                    "intensity": 0.0292
                  },
                  "parameters": {
                    "mode": "INLAND_WATER",
                    "from": {
                      "locode": "FRVAF",
                      "coordinates": null
                    },
                    "to": {
                      "locode": "FRLIO",
                      "coordinates": null
                    },
                    "containerSize": null,
                    "containerType": null,
                    "containerSizeTypeCode": null,
                    "weight": null,
                    "vesselType": "MOTOR_VESSEL",
                    "nContainers": null
                  },
                  "properties": {
                    "dataType": "DEFAULT",
                    "distance": 105912,
                    "weight": 1000,
                    "containerSizeTypeCode": null,
                    "vessel": {
                      "vesselType": "MOTOR_VESSEL",
                      "minTonnage": 0,
                      "maxTonnage": 1000,
                      "combinedEmptyRunningLoadFactor": 0.55,
                      "fuel": "DIESEL",
                      "nBarges": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223533774,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "3260"
                  ],
                  "messages": [
                    "Unknown inland vessel type, allowed values are [MOTOR_VESSEL, COUPLED_CONVOY, PUSHED_CONVOY, TANKER, CONTAINER_VESSEL_110, CONTAINER_VESSEL_135, CONTAINER_COUPLED]"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223506626,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1040"
                  ],
                  "messages": [
                    "Location 'FRVFA' not found."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/co2/v2/direct/rail": {
      "get": {
        "operationId": "getCO2ForRail",
        "tags": [
          "co2"
        ],
        "summary": "Get CO2 for rail",
        "description": "This endpoint returns CO2e emissions (i.e., CO2e equivalent emissions) in grams (g) for a train voyage between two specified train stations. \n\n### Origin and destination \n\nThe train stations can be given either as locodes or as coordinates.\nYou must provide either `fromLocode` or `fromCoordinates` and either `toLocode` or `toCoordinates`.\n\nWe currently support calculation within these regions: Europe, North America, South America, Asia, Oceania, Europe/Asia, and Africa. Please note that both origin and destination must be in the same region. \n\nThe distance between the origin and destination is computed using rail networks. However, you can use your own computed distance (in meters) using the `distance` parameter.\nIt's important to note that while custom distance input is accepted, both the origin and destination remain mandatory as CO2e computation is region-dependent.\n\n### Cargo specifications\n\nSeveral parameters allow to define the specification of the cargo carried: `nContainers`, `containerSizeTypeCode`, `weight` and `loadCharacteristics`. \n\nThe following container types are supported by our API:\n20GP, 22G1, 2200, 22G0, 2202, 2210 (20ft, General purpose (Standard)) [Default]\n40GP, 42G1, 42G0, 40G1 (40ft, General purpose (Standard)), \n40HC, 45G1, 45G0, 4500, 4510 (40ft High cube, General Purpose),\n22R1, 2231 (20ft, Reefer),\n40NOR, 42R1, 4531 (40ft, Reefer),\n40REHC, 45R1, 45R8 (40ft High cube, Reefer),\n53GP (53ft High cube).\n\n**Here are two common use cases:** \n\n#### Container\n\nFor a container, use the parameters `nContainers` and `containerSizeTypeCode`. Additionaly, you can set the parameter `loadCharacteristics` to `CONTAINER`.\n\nIf you also provide the `weight` of the goods, this value will take priority over the `nContainers`. If `weight` is not provided, an average of 10 tons per TEU will be taken into account for CO2e calculations.\n\n#### Average\n\nIf you do not specify `loadCharacteristics`, or container specifications, we assume you have a cargo of type `AVERAGE_MIXED`. The default weight in that case is 1 metric ton, but it can be specified if known.\n\n### Fuel  \n\nThe fuel type can be specified when known. Please note that certain fuel types may not be supported in all regions.\n\n### Response\n\nThe response contains WTT (well-to-tank) and TTW (tank-to-wheels) CO2e emissions in grams (g) for the amount of goods carried. It also contains the intensity factor (kg of CO2e per ton.kilometer) which is calculated from the WTW CO2e emissions, the distance and the weight (in `properties`).\n\nA `parameters` field is present, containing all the parameters that were passed in the query and the default values if some parameters were not passed. \n\nAdditionally, a `properties` field, which contains useful information used for the calculation, for example, the distance. The property `dataType` specifies if the data used to calculate the CO2e emissions is `default` data (representative of average operating practices) or `modeled` data (taking into account vehicle information).\n\n### Methodology references\n\nThe emissions are calculated using the GLEC framework.\n",
        "parameters": [
          {
            "name": "fromLocode",
            "description": "The UNLOCODE of the departure train station.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "FRMRS",
              "example": "FRMRS"
            }
          },
          {
            "name": "fromCoordinates",
            "description": "The coordinates of the departure train station given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5.382152795791626,43.3038665102729"
            }
          },
          {
            "name": "toLocode",
            "description": "The UNLOCODE code of the arrival train station.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "FR2JR",
              "example": "FR2JR"
            }
          },
          {
            "name": "toCoordinates",
            "description": "The coordinates of the arrival train station given as `lon,lat`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "4.893014430999756,44.927657882857886"
            }
          },
          {
            "name": "distance",
            "description": "Your own computed distance (if known) in meters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 564575
            }
          },
          {
            "name": "nContainers",
            "description": "The number of containers.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 2
            }
          },
          {
            "name": "containerSizeTypeCode",
            "description": "Code to identify the size and the type of the container.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "20GP",
                "22G1",
                "2200",
                "22G0",
                "2202",
                "2210",
                "40GP",
                "42G1",
                "42G0",
                "40G1",
                "40HC",
                "45G1",
                "4500",
                "45G0",
                "22R1",
                "2231",
                "42R1",
                "4531",
                "40NOR",
                "45R1",
                "45R8",
                "40REHC",
                "53GP"
              ],
              "example": "20GP"
            }
          },
          {
            "name": "weight",
            "description": "The weight of shipped goods in kilograms. If both `weight` and `nContainers` are provided, the `weight` will take priority over the `nContainers`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "example": 5000
            }
          },
          {
            "name": "loadCharacteristics",
            "description": "Can be `AVERAGE_MIXED` (default) or `CONTAINER`. If `nContainers` or `containerSizeTypeCode` are passed, this parameter is automatically set to `CONTAINER`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CONTAINER",
                "AVERAGE_MIXED"
              ],
              "default": "AVERAGE_MIXED"
            }
          },
          {
            "name": "fuel",
            "description": "The fuel type can be `ELEC`, `DIESEL` or `DEFAULT`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ELEC",
                "DIESEL",
                "DEFAULT"
              ],
              "default": "ELEC"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/co2/v2/direct/rail?fromLocode=FRMRS&toLocode=FR2JR&fuel=ELEC&weight=5000 \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "co2e": {
                    "total": 24541,
                    "wtt": 24541,
                    "ttw": 0
                  },
                  "parameters": {
                    "mode": "RAIL",
                    "from": {
                      "locode": "FRMRS",
                      "coordinates": null
                    },
                    "to": {
                      "locode": "FR2JR",
                      "coordinates": null
                    },
                    "weight": 5000,
                    "fuel": "ELEC",
                    "loadType": "AVERAGE_MIXED"
                  },
                  "properties": {
                    "dataType": "DEFAULT",
                    "distance": 411747,
                    "region": "Europe",
                    "containerSizeTypeCode": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223533774,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "3080"
                  ],
                  "messages": [
                    "Unknown fuel type, allowed values are [DIESEL, ELEC, DEFAULT]"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223506626,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1040"
                  ],
                  "messages": [
                    "Location with locode 'FR3JR' not found."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/co2/v2/direct/road": {
      "get": {
        "operationId": "getCO2ForRoad",
        "tags": [
          "co2"
        ],
        "summary": "Get CO2 for road",
        "description": "This endpoint returns CO2e emissions (i.e., CO2 equivalent emissions) in grams (g) for a voyage from a city to another by road. \n\n### Origin and destination \n\nThe source and destination can be given either by locode or coordinates.\nYou must provide either `fromLocode` or `fromCoordinates` and either `toLocode` or `toCoordinates`.\n\nThe emissions are calculated using the real road network distance and based on the region. However, you can use the parameter `distance` (in meters) to pass your own distance (the origin and destination remain mandatory because the co2e computation is region-dependent).\n\nSupported regions are: Europe, North America, Ocenia South America, Africa and Asia. Please note that both origin and destination must be in the same region. \n\n### Cargo specifications\n\nContainer specifications such as `nContainers`, `nContainers`, `weight` and `loadCharacteristics` define the cargo specifications. \n\nThe following container types are supported by our API:\n20GP, 22G1, 2200, 22G0, 2202, 2210 (20ft, General purpose (Standard)) [Default]\n40GP, 42G1, 42G0, 40G1 (40ft, General purpose (Standard)), \n40HC, 45G1, 45G0, 4500, 4510 (40ft High cube, General Purpose),\n22R1, 2231 (20ft, Reefer),\n40NOR, 42R1, 4531 (40ft, Reefer),\n40REHC, 45R1, 45R8 (40ft High cube, Reefer),\n53GP (53ft High cube).\n\n**Here are some use cases:**\n\n#### Container \n\nFor a container use the parameters `nContainers` and `containerSizeTypeCode`. \n\nIf you also provide the `weight` of the goods, this value will take priority over the `nContainers`.\nIf `weight` is not provided, an average of 10 tons per TEU will be taken into account for CO2e calculations.\n\nYou can also pass a `truckSize` and a `fuelType`. Not all combinations are usable: in order to limit the errors and return CO2e emissions in most cases, we adapt `truckSize` and `fuel` parameters passed.\n\nIf you do not specify a `truckSize`, an appropiate one will be chosen for you (except if you pass one).\n\nThe parameters actually used are listed in the `properties` object of the response.\n\n#### Average\n\nIf you do not specify the `weight` or the `loadCharacteristics`, we assume you have a cargo of type `AVERAGE_MIXED`. The default weight in that case is 1 metric ton of goods in the worst case scenario (smallest truck) (`loadCharacteristics = AVERAGE_MIXED or DEFAULT`).\n\nIf the `weight` is specified, you must also provide the size of the truck (gross vehicle weight in tons) except for North America and Oceania, where the truck size is not taken into account.\n\n### Truck specifications\n\nFor regions including Europe, South America, Africa and Asia, you can pass a `truckSize` (gross vehicle weight - GVW) for more accurate results. \n\n### Fuel specifications\n\nFor greater accuracy in CO2e values, you can specify the fuel type from the following options: \n\n- DIESEL\n- CNG\n- LNG\n- HVO\n- ELEC \n- BIOLNG \n- BIOCNG\n- BIODIESEL\n- HYDROGEN_GASEOUS_FCV\n\nDiesel-Biodiesel blends:\n\n- DIESEL99_BIODIESEL1 (99% Diesel, 1% Biodiesel)\n- DIESEL98_BIODIESEL2 (98% Diesel, 2% Biodiesel)\n- DIESEL95_BIODIESEL5 (95% Diesel, 5% Biodiesel)\n- DIESEL93_BIODIESEL7 (93% Diesel, 7% Biodiesel)\n- DIESEL90_BIODIESEL10 (90% Diesel, 10% Biodiesel)\n- DIESEL80_BIODIESEL20 (80% Diesel, 20% Biodiesel)\n- DIESEL50_BIODIESEL50 (50% Diesel, 50% Biodiesel)\n\nFor `ELEC` the calculation uses local emission factors from the origin.\n\nAdditionally, for vans weighing less than 3.5t, you may select `LPG` and `PETROL` as fuel options in regions including Europe, South America, Africa and Asia.\n\n### Carrier specifications (North America)\n\nWe can compute CO2e for a given truck carrier (identified by its SCAC). This is only available in North America (the from/to locations should be within this region) and the computation uses SmartWay carrier data (Dray (CONTAINER) and Mix (AVERAGE_MIXED)).\n\nYou can use the parameter `carrierScac` (which is a carrier alpha code identifier) to select the carrier. \nNote that in that case we only support DIESEL as fuel type and the `truckSize` cannot be changed. If the SCAC passed is not valid or we don't have enough data to compute CO2e, the computation will be based on GLEC defaults. In that case, the `carrierScac` property in the field `properties` of the response is set to `null`.\n\n### Response\n\nThe response contains WTW (well-to-wheels) CO2e emissions in grams (g) for the amount of goods carried and detailed emissions: WTT (well-to-tank) and TTW (tank-to-wheels). It also contains the intensity factor (kg of CO2e per ton.kilometer) which is calculated from the WTW CO2e emissions, the distance and the weight (in `properties`).\n\nThe field `parameters` contains the parameters that were passed in the query and the default values that were used. Depending on the combination of parameters you enter, the default values for other parameters may vary. For example, the default `truckSize` for average mixed goods is 3t while it is 33t for container. \n\nThe field `properties` contains information about the data that was used for the calculation, for example the distance, some characteristics about the truck, the hypothesis made for load factor, etc. The property `dataType` indicates whether the data used to calculate the CO2 emissions is `default` data (representative of average operating practices) or `modeled` data (which takes into account specific vehicle information).\n\n### Methodology references\n\nThe emissions are calculated using the GLEC framework or SmartWay Carrier data.\nYou can find detailed information about the calculation and the hypothesis in our Guide section.\n",
        "parameters": [
          {
            "name": "fromLocode",
            "description": "The UNLOCODE of the departure city.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "FRMRS",
              "type": "string",
              "example": "FRMRS"
            }
          },
          {
            "name": "fromCoordinates",
            "description": "The coordinates of the departure city given as `lon,lat`.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "5.34005236625671,43.3317317962646",
              "type": "string"
            }
          },
          {
            "name": "toLocode",
            "description": "The UNLOCODE code of the arrival city.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "FRAOP",
              "example": "FRAOP",
              "type": "string"
            }
          },
          {
            "name": "toCoordinates",
            "description": "The coordinates of the arrival city given as `lon,lat`.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "4.89004158973694,43.4159469604492",
              "type": "string"
            }
          },
          {
            "name": "distance",
            "description": "Your own computed distance (if known) in meters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 564575
            }
          },
          {
            "name": "weight",
            "description": "The weight of shipped goods in kilograms. If both `weight` and `nContainers` are provided, the `weight` will take priority over the `nContainers`.",
            "in": "query",
            "required": false,
            "schema": {
              "default": 1000,
              "example": 10000,
              "type": "integer"
            }
          },
          {
            "name": "fuel",
            "description": "The fuel type can be `DIESEL`, `CNG`, `LNG`, `HVO`, `ELEC`, `BIOLNG`, `BIOCNG`, `BIODIESEL`, `HYDROGEN_GASEOUS_FCV` or various Diesel-Biodiesel blends (`DIESEL99_BIODIESEL1`, `DIESEL98_BIODIESEL2`, `DIESEL95_BIODIESEL5`, `DIESEL93_BIODIESEL7`, `DIESEL90_BIODIESEL10`, `DIESEL80_BIODIESEL20`, `DIESEL50_BIODIESEL50`). For vans weighing less than 3.5 tons in regions including Europe, South America, Africa and Asia, you may select `LPG` and `PETROL`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DIESEL",
                "CNG",
                "LNG",
                "HVO",
                "ELEC",
                "BIOLNG",
                "BIOCNG",
                "BIODIESEL",
                "PETROL",
                "LPG",
                "HYDROGEN_GASEOUS_FCV",
                "DIESEL99_BIODIESEL1",
                "DIESEL98_BIODIESEL2",
                "DIESEL95_BIODIESEL5",
                "DIESEL93_BIODIESEL7",
                "DIESEL90_BIODIESEL10",
                "DIESEL80_BIODIESEL20",
                "DIESEL50_BIODIESEL50"
              ],
              "example": "DIESEL"
            }
          },
          {
            "name": "truckSize",
            "description": "The gross vehicle weight of the truck in metric tons, between 0 and 72t. If `nContainers` is used, the default value is 33t (except in North America where the truck size is not taken into account)",
            "in": "query",
            "required": false,
            "schema": {
              "default": 3,
              "example": 18,
              "type": "integer"
            }
          },
          {
            "name": "loadCharacteristics",
            "description": "Specifies the type of cargo, which can be `AVERAGE_MIXED`, `CONTAINER` or `DEFAULT` (North America + Oceania). If `nContainers` or `containerSizeTypeCode` are passed, this parameter is automatically set to `CONTAINER`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE_MIXED",
                "CONTAINER",
                "DEFAULT"
              ],
              "default": "AVERAGE_MIXED"
            }
          },
          {
            "name": "nContainers",
            "description": "The number of containers.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 2,
              "type": "integer"
            }
          },
          {
            "name": "containerSizeTypeCode",
            "description": "Code to identify the size and the type of the container. We recommend to use this parameter instead of `containerType` and `containerSize`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "20GP",
                "22G1",
                "2200",
                "22G0",
                "2202",
                "2210",
                "40GP",
                "42G1",
                "42G0",
                "40G1",
                "40HC",
                "45G1",
                "4500",
                "45G0",
                "22R1",
                "2231",
                "42R1",
                "4531",
                "40NOR",
                "45R1",
                "45R8",
                "40REHC",
                "53GP"
              ],
              "example": "20GP"
            }
          },
          {
            "name": "carrierScac",
            "description": "The Standard Carrier Alpha Code (SCAC) of the truck carrier (only available for North America). Examples ACAP, ACRQ, ACUI, ACXE.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "ACAP",
              "type": "string"
            }
          },
          {
            "name": "containerSize",
            "deprecated": true,
            "description": "The size of the containers (20, 40 or 45). We recommend to use of the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "example": 40,
              "type": "integer"
            }
          },
          {
            "name": "containerType",
            "deprecated": true,
            "description": "The type of the containers (either STANDARD or HIGH_CUBE). Default is STANDARD.  We recommend to use of the parameter `containerSizeTypeCode` instead.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "STANDARD",
              "type": "string"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/co2/v2/direct/road?fromLocode=FRMRS&toLocode=FRAOP&truckSize=18&fuel=CNG&weight=10000 \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "co2e": {
                    "total": 1301297,
                    "wtt": 134617,
                    "ttw": 1166680,
                    "intensity": 0.145
                  },
                  "parameters": {
                    "mode": "ROAD",
                    "from": {
                      "locode": "FRMRS",
                      "coordinates": null
                    },
                    "to": {
                      "locode": "FRAOP",
                      "coordinates": null
                    },
                    "loadType": "AVERAGE_MIXED",
                    "weight": 10000,
                    "fuel": "CNG",
                    "truckSize": 18,
                    "carrierScac": null,
                    "nContainers": "null,",
                    "containerSize": "null,",
                    "containerType": "STANDARD,",
                    "containerSizeTypeCode": null
                  },
                  "properties": {
                    "dataType": "DEFAULT",
                    "distance": 896661,
                    "region": "Europe",
                    "carrierScac": null,
                    "containerSizeTypeCode": null,
                    "truck": {
                      "minSize": 12,
                      "maxSize": 20,
                      "loadFactor": 0.6,
                      "emptyRunning": 0.17,
                      "combinedEmptyRunningLoadFactor": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223566402,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "2020"
                  ],
                  "messages": [
                    "Either coordinates or locode must be given for source and destination"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625223595954,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1040"
                  ],
                  "messages": [
                    "Location with locode 'FR3JR' not found."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vessel/v2/{imo}/position": {
      "get": {
        "operationId": "getVesselPosition",
        "tags": [
          "vessel"
        ],
        "summary": "Get vessels positions",
        "description": "Retrieve information from AIS and return general information about the vessel together with its last known position, its last known speed (in km/h) and its current draft (in m).\n\nIf an IMO was not found, the object at its position is `null`.\n",
        "parameters": [
          {
            "name": "imo",
            "description": "An IMO number.",
            "in": "path",
            "required": true,
            "schema": {
              "default": 9299628,
              "example": 9299628,
              "type": "string"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/vessel/v2/9299628/position \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": [
                  {
                    "info": {
                      "imo": 9299628,
                      "name": "CMA CGM OTELLO",
                      "length": 334.07,
                      "width": 42
                    },
                    "position": {
                      "type": "Feature",
                      "properties": {
                        "timestamp": 1606918764000,
                        "speed": 0,
                        "draft": 7.2,
                        "cog": 150.8,
                        "heading": 152
                      },
                      "geometry": {
                        "type": "Point",
                        "coordinates": [
                          120.25661,
                          35.994965
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1625230996503,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "5000"
                  ],
                  "messages": [
                    "IMO number must be a 7-digit number"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable.",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1626167146557,
                  "status": 503,
                  "error": "Service Unavailable",
                  "errorCodes": [
                    "5020"
                  ],
                  "messages": [
                    "One of our service is unavailable."
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/vessel/v2/trace": {
      "get": {
        "operationId": "getVesselTrace",
        "tags": [
          "vessel"
        ],
        "summary": "Get trace of a given vessel",
        "description": "This endpoint returns the historical trace of a given vessel between two dates in the past. The successive positions of the vessel are retrieved from AIS and processed to determine the geometry and route statistics. \n\n### Vessel information \nThe vessel can be identified either by its `imo` number or its `mmsi`. In the case both are given, the `mmsi` will be taken into account. \n\n### Dates\nThis endpoint takes two dates for the beginning and the end of the trace. Both are required and can be passed using the ISO 8601 format (`departureDateTime` and `arrivalDateTime`) or the unix time in milliseconds (`departure` and `arrival`).\n\n### Response\nThe response is a Geojson `FeatureCollection`. The trace is represented as a `Feature` : its geometry is a MultiLineString (cut at the antimeridian if crossed) and its properties give information about the route (distance, areas crossed, average speed).\nTotal distance + distances in Seca zones and HRA are returned.\nNote that the average speed is computed for the entire trace. If the vessel stops multiple days, the average speed can be low.\n",
        "parameters": [
          {
            "name": "imo",
            "description": "imo number of the vessel (required if `mmsi` is not used)",
            "in": "query",
            "required": false,
            "schema": {
              "default": 9245756,
              "example": 9245756,
              "type": "integer"
            }
          },
          {
            "name": "mmsi",
            "description": "mmsi number of the vessel (required if `imo` not used)",
            "in": "query",
            "required": false,
            "schema": {
              "default": 220061000,
              "example": 220061000,
              "type": "integer"
            }
          },
          {
            "name": "departureDateTime",
            "description": "Specifies the beginning of the trace in the ISO 8601 format (required if `departure` is not used)",
            "in": "query",
            "required": false,
            "schema": {
              "default": "2023-02-16T15:00:00Z",
              "example": "2023-02-16T15:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "departure",
            "description": "Specifies the begining of the trace in unix time (in ms) (required if `departureDateTime` is not used)",
            "in": "query",
            "required": false,
            "schema": {
              "example": 1676559600000,
              "type": "number"
            }
          },
          {
            "name": "arrivalDateTime",
            "description": "Specifies the end of the trace in the ISO 8601 format (required if `arrival` is not used)",
            "in": "query",
            "required": false,
            "schema": {
              "default": "2023-02-16T16:00:00Z",
              "example": "2023-02-16T16:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "arrival",
            "description": "Specifies the end of the trace in unix time (in ms) (required if `arrivalDateTime` is not used)",
            "in": "query",
            "required": false,
            "schema": {
              "example": 1676995200000,
              "type": "number"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\nhttps://api.searoutes.com/vessel/v2/trace?imo=9245756&departureDateTime=2023-02-16T15:00:00Z&arrivalDateTime=2023-02-16T16:00:00Z \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "type": "FeatureCollection",
                  "features": [
                    {
                      "type": "Feature",
                      "properties": {
                        "distance": 25253,
                        "mode": "sea",
                        "departure": 1676559612000,
                        "arrival": 1676563074000,
                        "duration": 3462000,
                        "speed": 26.26,
                        "areas": {
                          "type": "FeatureCollection",
                          "features": [
                            {
                              "type": "Feature",
                              "properties": {
                                "id": 11100,
                                "name": "Gibraltar",
                                "alternatives": []
                              },
                              "geometry": {
                                "type": "Point",
                                "coordinates": [
                                  -5.7470196407155925,
                                  35.95714400373309
                                ]
                              }
                            }
                          ],
                          "properties": null
                        },
                        "details": [],
                        "secaIntersection": 0,
                        "hraIntersection": 0,
                        "speedInKts": 14.179,
                        "intersectsIceArea": false,
                        "vessel": {
                          "imo": 9245756,
                          "name": "Cornelia Maersk",
                          "length": 346.9800109863281,
                          "width": 42.79999923706055,
                          "maxDraft": 14.5,
                          "draft": 14.5
                        }
                      },
                      "geometry": {
                        "type": "MultiLineString",
                        "coordinates": [
                          [
                            [
                              -5.8574066162109375,
                              35.894554138183594
                            ],
                            [
                              -5.800363540649414,
                              35.895530700683594
                            ],
                            [
                              -5.786423206329346,
                              35.895965576171875
                            ],
                            [
                              -5.7660064697265625,
                              35.89668655395508
                            ],
                            [
                              -5.744198322296143,
                              35.89738464355469
                            ],
                            [
                              -5.704141616821289,
                              35.89827346801758
                            ],
                            [
                              -5.691171646118164,
                              35.898773193359375
                            ],
                            [
                              -5.686121463775635,
                              35.89896011352539
                            ],
                            [
                              -5.6517014503479,
                              35.90019989013672
                            ],
                            [
                              -5.640530109405518,
                              35.90073013305664
                            ],
                            [
                              -5.627970218658447,
                              35.90140151977539
                            ],
                            [
                              -5.619048118591309,
                              35.90224838256836
                            ],
                            [
                              -5.579531669616699,
                              35.91154479980469
                            ]
                          ]
                        ]
                      }
                    }
                  ],
                  "properties": {
                    "distance": 25253,
                    "mode": "sea",
                    "departure": 1676559612000,
                    "arrival": 1676563074000,
                    "duration": 3462000,
                    "speed": 26.26,
                    "areas": {
                      "type": "FeatureCollection",
                      "features": [
                        {
                          "type": "Feature",
                          "properties": {
                            "id": 11100,
                            "name": "Gibraltar",
                            "alternatives": []
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              -5.7470196407155925,
                              35.95714400373309
                            ]
                          }
                        }
                      ],
                      "properties": null
                    },
                    "details": [],
                    "secaIntersection": 0,
                    "hraIntersection": 0,
                    "speedInKts": 14.179,
                    "intersectsIceArea": false,
                    "vessel": {
                      "imo": 9245756,
                      "name": "Cornelia Maersk",
                      "length": 346.9800109863281,
                      "width": 42.79999923706055,
                      "maxDraft": 14.5,
                      "draft": 14.5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1678789588318,
                  "status": 400,
                  "error": "Bad Request",
                  "errorCodes": [
                    "5000"
                  ],
                  "messages": [
                    "IMO or MMSI number must be given."
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1678789881989,
                  "status": 404,
                  "error": "Not Found",
                  "errorCodes": [
                    "1020"
                  ],
                  "messages": [
                    "We could not find a route for mmsi 220061000 from 2023-02-01T15:00:00Z to 2023-02-03T16:00:00Z"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service is unavailable.",
            "content": {
              "application/json": {
                "example": {
                  "timestamp": 1678789732217,
                  "status": 503,
                  "error": "Service Unavailable",
                  "errorCodes": [
                    "5000"
                  ],
                  "messages": [
                    "One of our service is unavailable"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/weather/v2/current": {
      "get": {
        "operationId": "getWeather",
        "tags": [
          "weather"
        ],
        "summary": "Get latest weather at location",
        "description": "Get historical, real or forecasted weather information at a given location. \n\nIn the response, we return the closest point, on a 0.5 degree grid, at which our models computed weather information (wind, waves, current, etc.). Likewise, we find the closest timestamp to your requested timestamp for which we have data. For instance, when requesting weather information at the point `{\"latitude\": 17.152, \"longitude\": -80.564, \"timestamp\": 1548388800000}`, we return data for our closest point ` {\"latitude\": 17, \"longitude\": -80.5, \"timestamp\": 1548385200000}`.\n\nAll values are expressed in the standard SI units (temperatures in Celcius degrees, humidity, cloud coverage and ice coverage in percentages, pressure in hectopascals, precipitation in millimeters, times in seconds, distances in meters, speeds in meters per second, salinity in PSU).\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "latitude": 17.152,
                  "longitude": -80.564,
                  "timestamp": 1548388800000,
                  "weather": {
                    "latitude": 17,
                    "longitude": -80.5,
                    "timestamp": 1514764800000,
                    "air": {
                      "temperature": {
                        "value": 26.3,
                        "last3Hours": {
                          "max": 26.3,
                          "min": 26
                        },
                        "daily": {
                          "max": 27.3,
                          "min": 25.6
                        }
                      },
                      "humidity": 84.2,
                      "pressure": 1012.6
                    },
                    "precipitation": {
                      "last3Hours": {
                        "cumulative": 3.7,
                        "mean": 0
                      }
                    },
                    "wave": {
                      "height": 1.1,
                      "period": 13.5,
                      "length": 182.25,
                      "direction": 197.5,
                      "vector": {
                        "u": 4.1,
                        "v": 12.9
                      },
                      "speed": 13.5
                    },
                    "water": {
                      "temperature": {
                        "value": 26.6
                      },
                      "salinity": 34.7
                    },
                    "current": {
                      "direction": 60.9,
                      "vector": {
                        "u": -0.9,
                        "v": -0.5
                      },
                      "speed": 1.0296
                    },
                    "wind": {
                      "direction": 213.1,
                      "vector": {
                        "u": 3,
                        "v": 4.6
                      },
                      "gust": 5.4,
                      "speed": 5.4918,
                      "beaufort": 3
                    },
                    "condition": {
                      "overall": "rain"
                    },
                    "cloudCoverage": 75,
                    "iceCoverage": 0,
                    "isLand": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "timeframe": {
                    "value": "qwer",
                    "msg": "must be a UNIX timestamp (milliseconds)",
                    "param": "timestamp",
                    "location": "query"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "latitude",
            "description": "Latitude\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": 17.152,
              "type": "number"
            }
          },
          {
            "name": "longitude",
            "description": "Longitude\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": -80.564,
              "type": "number"
            }
          },
          {
            "name": "timestamp",
            "description": "Unix timestamp, in milliseconds\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": 1548388800000,
              "type": "number"
            }
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://api.searoutes.com/weather/v2/current?timestamp=1548388800000&latitude=17.152&longitude=-80.564' \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/weather/v2/history": {
      "get": {
        "operationId": "getWeatherTimeFrame",
        "tags": [
          "weather"
        ],
        "summary": "Get historical weather at location",
        "description": "Get historical weather information in bulk, at a given location, for the period 2013-today. By default we return weather information every 3 hours for your requested timeframe. You cannot request data for more than two weeks at a time.\n\nAll values are expressed in the standard SI units (temperatures in Celcius degrees, humidity, cloud coverage and ice coverage in percentages, pressure in hectopascals, precipitation in millimeters, times in seconds, distances in meters, speeds in meters per second, salinity in PSU).\n",
        "parameters": [
          {
            "name": "latitude",
            "description": "Latitude\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": 17.152,
              "type": "number"
            }
          },
          {
            "name": "longitude",
            "description": "Longitude\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": -80.564,
              "type": "number"
            }
          },
          {
            "name": "timestamp",
            "description": "Unix timestamp, in milliseconds\n",
            "in": "query",
            "required": true,
            "schema": {
              "example": 1454561200000,
              "type": "number"
            }
          },
          {
            "name": "timeframe",
            "description": "Time window, in milliseconds\n",
            "in": "query",
            "required": false,
            "schema": {
              "example": 21600000,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": [
                  {
                    "latitude": 17.152,
                    "longitude": -80.564,
                    "timestamp": 1454561200000,
                    "weather": {
                      "latitude": 17,
                      "longitude": -80.5,
                      "timestamp": 1454565600000,
                      "air": {
                        "temperature": {
                          "value": 26.9,
                          "last3Hours": {
                            "max": 27.2,
                            "min": 27
                          },
                          "daily": {
                            "max": 27.3,
                            "min": 26.6
                          }
                        },
                        "humidity": 77.3,
                        "pressure": 1013.8
                      },
                      "precipitation": {
                        "last3Hours": {
                          "cumulative": 0,
                          "mean": 0
                        }
                      },
                      "wave": {
                        "height": 1.2,
                        "period": 0,
                        "length": 0,
                        "direction": 180,
                        "vector": {
                          "u": null,
                          "v": null
                        },
                        "speed": null
                      },
                      "water": {
                        "temperature": {
                          "value": 27.3,
                          "daily": {
                            "max": 27.3,
                            "min": 27.3
                          }
                        },
                        "salinity": 36.1
                      },
                      "current": {
                        "direction": 111.8,
                        "vector": {
                          "u": -0.5,
                          "v": 0.2
                        },
                        "speed": 0.5385
                      },
                      "wind": {
                        "direction": 95.6,
                        "vector": {
                          "u": -7.1,
                          "v": 0.7
                        },
                        "gust": 9.3,
                        "speed": 7.1344,
                        "beaufort": 5
                      },
                      "condition": {
                        "overall": "sun with clouds"
                      },
                      "cloudCoverage": 18.4,
                      "iceCoverage": 0,
                      "isLand": false
                    }
                  },
                  {
                    "latitude": 17.152,
                    "longitude": -80.564,
                    "timestamp": 1454572000000,
                    "weather": {
                      "latitude": 17,
                      "longitude": -80.5,
                      "timestamp": 1454576400000,
                      "air": {
                        "temperature": {
                          "value": 26.7,
                          "last3Hours": {
                            "max": 26.9,
                            "min": 26.7
                          },
                          "daily": {
                            "max": 27.3,
                            "min": 26.6
                          }
                        },
                        "humidity": 78.5,
                        "pressure": 1013
                      },
                      "precipitation": {
                        "last3Hours": {
                          "cumulative": 0.1,
                          "mean": 0.03
                        }
                      },
                      "wave": {
                        "height": 1.3,
                        "period": 0,
                        "length": 0,
                        "direction": 180,
                        "vector": {
                          "u": null,
                          "v": null
                        },
                        "speed": null
                      },
                      "water": {
                        "temperature": {
                          "value": 27.3,
                          "daily": {
                            "max": 27.3,
                            "min": 27.3
                          }
                        },
                        "salinity": 36.1
                      },
                      "current": {
                        "direction": 111.8,
                        "vector": {
                          "u": -0.5,
                          "v": 0.2
                        },
                        "speed": 0.5385
                      },
                      "wind": {
                        "direction": 95.6,
                        "vector": {
                          "u": -7.1,
                          "v": 0.7
                        },
                        "gust": 9.4,
                        "speed": 7.1344,
                        "beaufort": 5
                      },
                      "condition": {
                        "overall": "rain"
                      },
                      "cloudCoverage": 20.8,
                      "iceCoverage": 0,
                      "isLand": false
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "errors": {
                    "timeframe": {
                      "value": "1000000000",
                      "msg": "timerange must be less than one week",
                      "param": "timeframe",
                      "location": "query"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://api.searoutes.com/weather/v2/history?timestamp=1454561200000&latitude=17.152&longitude=-80.564&timeframe=21600000' \\\n-H 'x-api-key: <your-api-key-here>'\n"
          }
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": "Use your `x-api-key` to authenticate with our APIs. Note that your key is tied with a usage plan. You are therefore rate limited depending on your subscription. If you wish you increase your request calls, please [get in touch with us](/contact/)."
      }
    },
    "schemas": {
      "GeoJsonObject": {
        "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3"
        },
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Feature",
              "FeatureCollection",
              "Point",
              "MultiPoint",
              "LineString",
              "MultiLineString",
              "Polygon",
              "MultiPolygon",
              "GeometryCollection"
            ]
          },
          "bbox": {
            "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "type"
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Geometry": {
        "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3"
        },
        "allOf": [
          {
            "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Feature",
                  "FeatureCollection",
                  "Point",
                  "MultiPoint",
                  "LineString",
                  "MultiLineString",
                  "Polygon",
                  "MultiPolygon",
                  "GeometryCollection"
                ]
              },
              "bbox": {
                "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "required": [
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Point",
                  "MultiPoint",
                  "LineString",
                  "MultiLineString",
                  "Polygon",
                  "MultiPolygon",
                  "GeometryCollection"
                ]
              }
            },
            "required": [
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "GeometryElement": {
        "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Feature",
                      "FeatureCollection",
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon",
                      "GeometryCollection"
                    ]
                  },
                  "bbox": {
                    "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon",
                      "GeometryCollection"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Point",
                  "MultiPoint",
                  "LineString",
                  "MultiLineString",
                  "Polygon",
                  "MultiPolygon"
                ]
              }
            },
            "required": [
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "Feature": {
        "description": "GeoJSon 'Feature' object",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.2"
        },
        "allOf": [
          {
            "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Feature",
                  "FeatureCollection",
                  "Point",
                  "MultiPoint",
                  "LineString",
                  "MultiLineString",
                  "Polygon",
                  "MultiPolygon",
                  "GeometryCollection"
                ]
              },
              "bbox": {
                "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "required": [
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "properties"
            ],
            "properties": {
              "geometry": {
                "allOf": [
                  {
                    "nullable": true
                  },
                  {
                    "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "allOf": [
                      {
                        "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                        "externalDocs": {
                          "url": "https://tools.ietf.org/html/rfc7946#section-3"
                        },
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Feature",
                              "FeatureCollection",
                              "Point",
                              "MultiPoint",
                              "LineString",
                              "MultiLineString",
                              "Polygon",
                              "MultiPolygon",
                              "GeometryCollection"
                            ]
                          },
                          "bbox": {
                            "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Point",
                              "MultiPoint",
                              "LineString",
                              "MultiLineString",
                              "Polygon",
                              "MultiPolygon",
                              "GeometryCollection"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "discriminator": {
                          "propertyName": "type"
                        }
                      }
                    ]
                  }
                ]
              },
              "properties": {
                "type": "object",
                "nullable": true
              },
              "id": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        ]
      },
      "FeatureCollection": {
        "description": "GeoJSon 'FeatureCollection' object",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.3"
        },
        "allOf": [
          {
            "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Feature",
                  "FeatureCollection",
                  "Point",
                  "MultiPoint",
                  "LineString",
                  "MultiLineString",
                  "Polygon",
                  "MultiPolygon",
                  "GeometryCollection"
                ]
              },
              "bbox": {
                "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "required": [
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          {
            "type": "object",
            "required": [
              "features"
            ],
            "properties": {
              "features": {
                "type": "array",
                "items": {
                  "description": "GeoJSon 'Feature' object",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3.2"
                  },
                  "allOf": [
                    {
                      "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                      "externalDocs": {
                        "url": "https://tools.ietf.org/html/rfc7946#section-3"
                      },
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Feature",
                            "FeatureCollection",
                            "Point",
                            "MultiPoint",
                            "LineString",
                            "MultiLineString",
                            "Polygon",
                            "MultiPolygon",
                            "GeometryCollection"
                          ]
                        },
                        "bbox": {
                          "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "discriminator": {
                        "propertyName": "type"
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "geometry",
                        "properties"
                      ],
                      "properties": {
                        "geometry": {
                          "allOf": [
                            {
                              "nullable": true
                            },
                            {
                              "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                              "externalDocs": {
                                "url": "https://tools.ietf.org/html/rfc7946#section-3"
                              },
                              "allOf": [
                                {
                                  "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                                  "externalDocs": {
                                    "url": "https://tools.ietf.org/html/rfc7946#section-3"
                                  },
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "Feature",
                                        "FeatureCollection",
                                        "Point",
                                        "MultiPoint",
                                        "LineString",
                                        "MultiLineString",
                                        "Polygon",
                                        "MultiPolygon",
                                        "GeometryCollection"
                                      ]
                                    },
                                    "bbox": {
                                      "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                                      "type": "array",
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "discriminator": {
                                    "propertyName": "type"
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "Point",
                                        "MultiPoint",
                                        "LineString",
                                        "MultiLineString",
                                        "Polygon",
                                        "MultiPolygon",
                                        "GeometryCollection"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "discriminator": {
                                    "propertyName": "type"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "nullable": true
                        },
                        "id": {
                          "oneOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Position": {
        "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
        },
        "type": "array",
        "minItems": 2,
        "maxItems": 3,
        "items": {
          "type": "number"
        }
      },
      "LineStringCoordinates": {
        "description": "GeoJSon fundamental geometry construct, array of two or more positions.\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.4"
        },
        "type": "array",
        "items": {
          "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
          "externalDocs": {
            "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
          },
          "type": "array",
          "minItems": 2,
          "maxItems": 3,
          "items": {
            "type": "number"
          }
        },
        "minItems": 2
      },
      "LinearRing": {
        "description": "A linear ring is a closed LineString with four or more positions.\nThe first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical.\nA linear ring is the boundary of a surface or the boundary of a hole in a surface.\nA linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.6"
        },
        "type": "array",
        "items": {
          "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
          "externalDocs": {
            "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
          },
          "type": "array",
          "minItems": 2,
          "maxItems": 3,
          "items": {
            "type": "number"
          }
        },
        "minItems": 4
      },
      "Point": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.2"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "type",
              "coordinates"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Point"
                ]
              },
              "coordinates": {
                "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                },
                "type": "array",
                "minItems": 2,
                "maxItems": 3,
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "MultiPoint": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.3"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "coordinates"
            ],
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                  },
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 3,
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ]
      },
      "LineString": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.4"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "coordinates"
            ],
            "properties": {
              "coordinates": {
                "description": "GeoJSon fundamental geometry construct, array of two or more positions.\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3.1.4"
                },
                "type": "array",
                "items": {
                  "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                  },
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 3,
                  "items": {
                    "type": "number"
                  }
                },
                "minItems": 2
              }
            }
          }
        ]
      },
      "MultiLineString": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.5"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "coordinates"
            ],
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "description": "GeoJSon fundamental geometry construct, array of two or more positions.\n",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3.1.4"
                  },
                  "type": "array",
                  "items": {
                    "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                    },
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 3,
                    "items": {
                      "type": "number"
                    }
                  },
                  "minItems": 2
                }
              }
            }
          }
        ]
      },
      "Polygon": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.6"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "coordinates"
            ],
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "description": "A linear ring is a closed LineString with four or more positions.\nThe first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical.\nA linear ring is the boundary of a surface or the boundary of a hole in a surface.\nA linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.\n",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3.1.6"
                  },
                  "type": "array",
                  "items": {
                    "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                    },
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 3,
                    "items": {
                      "type": "number"
                    }
                  },
                  "minItems": 4
                }
              }
            }
          }
        ]
      },
      "MultiPolygon": {
        "description": "GeoJSon geometry",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.7"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "allOf": [
                  {
                    "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3"
                    },
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Feature",
                          "FeatureCollection",
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      },
                      "bbox": {
                        "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Point",
                          "MultiPoint",
                          "LineString",
                          "MultiLineString",
                          "Polygon",
                          "MultiPolygon",
                          "GeometryCollection"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "coordinates"
            ],
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "description": "A linear ring is a closed LineString with four or more positions.\nThe first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical.\nA linear ring is the boundary of a surface or the boundary of a hole in a surface.\nA linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.\n",
                    "externalDocs": {
                      "url": "https://tools.ietf.org/html/rfc7946#section-3.1.6"
                    },
                    "type": "array",
                    "items": {
                      "description": "GeoJSon fundamental geometry construct.\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\nImplementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as \"M\") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.\n",
                      "externalDocs": {
                        "url": "https://tools.ietf.org/html/rfc7946#section-3.1.1"
                      },
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 3,
                      "items": {
                        "type": "number"
                      }
                    },
                    "minItems": 4
                  }
                }
              }
            }
          }
        ]
      },
      "GeometryCollection": {
        "type": "object",
        "description": "GeoJSon geometry collection\nGeometryCollections composed of a single part or a number of parts of a single type SHOULD be avoided when that single part or a single object of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could be used instead.\n",
        "externalDocs": {
          "url": "https://tools.ietf.org/html/rfc7946#section-3.1.8"
        },
        "allOf": [
          {
            "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
            "externalDocs": {
              "url": "https://tools.ietf.org/html/rfc7946#section-3"
            },
            "allOf": [
              {
                "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                "externalDocs": {
                  "url": "https://tools.ietf.org/html/rfc7946#section-3"
                },
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Feature",
                      "FeatureCollection",
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon",
                      "GeometryCollection"
                    ]
                  },
                  "bbox": {
                    "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point",
                      "MultiPoint",
                      "LineString",
                      "MultiLineString",
                      "Polygon",
                      "MultiPolygon",
                      "GeometryCollection"
                    ]
                  }
                },
                "required": [
                  "type"
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "geometries"
            ],
            "properties": {
              "geometries": {
                "type": "array",
                "items": {
                  "description": "Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection'\n",
                  "externalDocs": {
                    "url": "https://tools.ietf.org/html/rfc7946#section-3"
                  },
                  "allOf": [
                    {
                      "description": "Abstract type for all GeoJSon object except Feature and FeatureCollection\n",
                      "externalDocs": {
                        "url": "https://tools.ietf.org/html/rfc7946#section-3"
                      },
                      "allOf": [
                        {
                          "description": "GeoJSon object\nThe coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.\n",
                          "externalDocs": {
                            "url": "https://tools.ietf.org/html/rfc7946#section-3"
                          },
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "Feature",
                                "FeatureCollection",
                                "Point",
                                "MultiPoint",
                                "LineString",
                                "MultiLineString",
                                "Polygon",
                                "MultiPolygon",
                                "GeometryCollection"
                              ]
                            },
                            "bbox": {
                              "description": "A GeoJSON object MAY have a member named \"bbox\" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.\n",
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "discriminator": {
                            "propertyName": "type"
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "Point",
                                "MultiPoint",
                                "LineString",
                                "MultiLineString",
                                "Polygon",
                                "MultiPolygon",
                                "GeometryCollection"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "discriminator": {
                            "propertyName": "type"
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "Point",
                            "MultiPoint",
                            "LineString",
                            "MultiLineString",
                            "Polygon",
                            "MultiPolygon"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "discriminator": {
                        "propertyName": "type"
                      }
                    }
                  ]
                },
                "minItems": 0
              }
            }
          }
        ]
      },
      "SeaLegDetails": {
        "type": "object",
        "properties": {
          "voyageNumber": {
            "type": "string"
          },
          "carrier": {
            "type": "object",
            "properties": {
              "scac": {
                "type": "string"
              }
            }
          },
          "vessel": {
            "type": "object",
            "properties": {
              "imo": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "fuelType": {
            "type": "string",
            "enum": [
              "HFO",
              "VLSFO",
              "ULSFO",
              "MDO",
              "MGO",
              "LNG",
              "BIOLNG",
              "LSMGO",
              "METHANOL",
              "BIOMETHANOL",
              "IFO380",
              "LNG_CMACGM_VAS",
              "UCO",
              "METHANOL_COAL",
              "METHANOL_GAS",
              "METHANOL_RENEWABLES"
            ]
          },
          "distance": {
            "type": "number"
          },
          "dateTime": {
            "type": "object",
            "properties": {
              "departure": {
                "format": "date-time"
              },
              "arrival": {
                "format": "date-time"
              }
            }
          }
        }
      },
      "RailLegDetails": {
        "type": "object",
        "properties": {
          "fuelType": {
            "type": "string",
            "enum": [
              "ELEC",
              "DIESEL",
              "DEFAULT"
            ]
          },
          "fuel": {
            "type": "string",
            "example": "DIESEL",
            "deprecated": true,
            "description": "We recommend to use the parameter `fuelType` instead"
          },
          "distance": {
            "type": "number"
          },
          "dateTime": {
            "type": "object",
            "properties": {
              "departure": {
                "format": "date-time"
              },
              "arrival": {
                "format": "date-time"
              }
            }
          }
        }
      },
      "InlandWaterLegDetails": {
        "type": "object",
        "properties": {
          "vesselType": {
            "type": "string",
            "enum": [
              "MOTOR_VESSEL",
              "COUPLED_CONVOY",
              "PUSHED_CONVOY",
              "CONTAINER_VESSEL_110",
              "CONTAINER_VESSEL_135",
              "CONTAINER_COUPLED"
            ],
            "default": "MOTOR_VESSEL",
            "example": "MOTOR_VESSEL"
          },
          "distance": {
            "type": "number"
          },
          "dateTime": {
            "type": "object",
            "properties": {
              "departure": {
                "format": "date-time"
              },
              "arrival": {
                "format": "date-time"
              }
            }
          }
        }
      },
      "AirLegDetails": {
        "type": "object",
        "properties": {
          "aircraft": {
            "type": "object",
            "properties": {
              "iata": {
                "type": "string",
                "default": "74Y",
                "example": "74Y"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CARGO",
                  "PASSENGER"
                ],
                "default": "CARGO",
                "example": "CARGO"
              }
            }
          },
          "distance": {
            "type": "number"
          },
          "dateTime": {
            "type": "object",
            "properties": {
              "departure": {
                "format": "date-time"
              },
              "arrival": {
                "format": "date-time"
              }
            }
          }
        }
      },
      "HubDetails": {
        "type": "object",
        "required": [
          "hubType"
        ],
        "properties": {
          "hubType": {
            "type": "string",
            "enum": [
              "WAREHOUSE",
              "TRANSHIPMENT_SITE",
              "STORAGE_TRANSHIPMENT",
              "LIQUID_BULK_TERMINAL",
              "MARITIME_CONTAINER_TERMINAL"
            ]
          }
        }
      },
      "RoadLegDetails": {
        "type": "object",
        "properties": {
          "truckSize": {
            "type": "integer"
          },
          "fuelType": {
            "type": "string",
            "enum": [
              "DIESEL",
              "CNG",
              "LNG",
              "PETROL",
              "HVO",
              "ELEC",
              "LPG",
              "BIOLNG",
              "BIOCNG",
              "HYDROGEN_GASEOUS_FCV",
              "BIODIESEL",
              "DIESEL99_BIODIESEL1",
              "DIESEL98_BIODIESEL2",
              "DIESEL95_BIODIESEL5",
              "DIESEL93_BIODIESEL7",
              "DIESEL90_BIODIESEL10",
              "DIESEL80_BIODIESEL20",
              "DIESEL50_BIODIESEL50"
            ]
          },
          "fuel": {
            "type": "string",
            "example": "DIESEL",
            "deprecated": true,
            "description": "We recommend to use the parameter `fuelType` instead"
          },
          "distance": {
            "type": "number"
          },
          "carrier": {
            "type": "object",
            "properties": {
              "scac": {
                "type": "string"
              }
            }
          },
          "dateTime": {
            "type": "object",
            "properties": {
              "departure": {
                "format": "date-time",
                "example": "2022-02-24T18:00:00+01:00"
              },
              "arrival": {
                "format": "date-time",
                "example": "2022-02-22T15:00:00+01:00"
              }
            }
          }
        }
      },
      "Road_Leg": {
        "type": "object",
        "required": [
          "from",
          "to",
          "mode"
        ],
        "properties": {
          "from": {
            "type": "string",
            "example": "FRMRS",
            "default": "FRMRS"
          },
          "to": {
            "type": "string",
            "example": "DEHAM",
            "default": "DEHAM"
          },
          "mode": {
            "type": "string",
            "enum": [
              "road"
            ],
            "example": "road",
            "default": "road"
          },
          "details": {
            "type": "object",
            "properties": {
              "truckSize": {
                "type": "integer"
              },
              "fuelType": {
                "type": "string",
                "enum": [
                  "DIESEL",
                  "CNG",
                  "LNG",
                  "PETROL",
                  "HVO",
                  "ELEC",
                  "LPG",
                  "BIOLNG",
                  "BIOCNG",
                  "HYDROGEN_GASEOUS_FCV",
                  "BIODIESEL",
                  "DIESEL99_BIODIESEL1",
                  "DIESEL98_BIODIESEL2",
                  "DIESEL95_BIODIESEL5",
                  "DIESEL93_BIODIESEL7",
                  "DIESEL90_BIODIESEL10",
                  "DIESEL80_BIODIESEL20",
                  "DIESEL50_BIODIESEL50"
                ]
              },
              "fuel": {
                "type": "string",
                "example": "DIESEL",
                "deprecated": true,
                "description": "We recommend to use the parameter `fuelType` instead"
              },
              "distance": {
                "type": "number"
              },
              "carrier": {
                "type": "object",
                "properties": {
                  "scac": {
                    "type": "string"
                  }
                }
              },
              "dateTime": {
                "type": "object",
                "properties": {
                  "departure": {
                    "format": "date-time",
                    "example": "2022-02-24T18:00:00+01:00"
                  },
                  "arrival": {
                    "format": "date-time",
                    "example": "2022-02-22T15:00:00+01:00"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Sea_Leg": {
        "type": "object",
        "required": [
          "from",
          "to",
          "mode"
        ],
        "properties": {
          "from": {
            "type": "string",
            "example": "-73.768741607666,45.4261722564697",
            "default": "-73.768741607666,45.4261722564697"
          },
          "to": {
            "type": "string",
            "example": "DEHAM",
            "default": "DEHAM"
          },
          "mode": {
            "type": "string",
            "enum": [
              "sea"
            ],
            "example": "sea",
            "default": "sea"
          },
          "details": {
            "type": "object",
            "properties": {
              "voyageNumber": {
                "type": "string"
              },
              "carrier": {
                "type": "object",
                "properties": {
                  "scac": {
                    "type": "string"
                  }
                }
              },
              "vessel": {
                "type": "object",
                "properties": {
                  "imo": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "fuelType": {
                "type": "string",
                "enum": [
                  "HFO",
                  "VLSFO",
                  "ULSFO",
                  "MDO",
                  "MGO",
                  "LNG",
                  "BIOLNG",
                  "LSMGO",
                  "METHANOL",
                  "BIOMETHANOL",
                  "IFO380",
                  "LNG_CMACGM_VAS",
                  "UCO",
                  "METHANOL_COAL",
                  "METHANOL_GAS",
                  "METHANOL_RENEWABLES"
                ]
              },
              "distance": {
                "type": "number"
              },
              "dateTime": {
                "type": "object",
                "properties": {
                  "departure": {
                    "format": "date-time"
                  },
                  "arrival": {
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Rail_Leg": {
        "type": "object",
        "required": [
          "from",
          "to",
          "mode"
        ],
        "properties": {
          "from": {
            "type": "string",
            "example": "-73.768741607666,45.4261722564697",
            "default": "-73.768741607666,45.4261722564697"
          },
          "to": {
            "type": "string",
            "example": "DEHAM",
            "default": "DEHAM"
          },
          "mode": {
            "type": "string",
            "enum": [
              "rail"
            ],
            "example": "rail",
            "default": "rail"
          },
          "details": {
            "type": "object",
            "properties": {
              "fuelType": {
                "type": "string",
                "enum": [
                  "ELEC",
                  "DIESEL",
                  "DEFAULT"
                ]
              },
              "fuel": {
                "type": "string",
                "example": "DIESEL",
                "deprecated": true,
                "description": "We recommend to use the parameter `fuelType` instead"
              },
              "distance": {
                "type": "number"
              },
              "dateTime": {
                "type": "object",
                "properties": {
                  "departure": {
                    "format": "date-time"
                  },
                  "arrival": {
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Inland_water_Leg": {
        "type": "object",
        "required": [
          "from",
          "to",
          "mode"
        ],
        "properties": {
          "from": {
            "type": "string",
            "example": "SKBTS",
            "default": "SKBTS"
          },
          "to": {
            "type": "string",
            "example": "DEHAM",
            "default": "DEHAM"
          },
          "mode": {
            "type": "string",
            "enum": [
              "inland-water"
            ],
            "example": "inland-water",
            "default": "inland-water"
          },
          "details": {
            "type": "object",
            "properties": {
              "vesselType": {
                "type": "string",
                "enum": [
                  "MOTOR_VESSEL",
                  "COUPLED_CONVOY",
                  "PUSHED_CONVOY",
                  "CONTAINER_VESSEL_110",
                  "CONTAINER_VESSEL_135",
                  "CONTAINER_COUPLED"
                ],
                "default": "MOTOR_VESSEL",
                "example": "MOTOR_VESSEL"
              },
              "distance": {
                "type": "number"
              },
              "dateTime": {
                "type": "object",
                "properties": {
                  "departure": {
                    "format": "date-time"
                  },
                  "arrival": {
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Air_Leg": {
        "type": "object",
        "required": [
          "from",
          "to",
          "mode"
        ],
        "properties": {
          "from": {
            "type": "string",
            "example": "FRMRS",
            "default": "FRMRS"
          },
          "to": {
            "type": "string",
            "example": "DEHAM",
            "default": "DEHAM"
          },
          "mode": {
            "type": "string",
            "enum": [
              "air"
            ],
            "example": "air",
            "default": "air"
          },
          "details": {
            "type": "object",
            "properties": {
              "aircraft": {
                "type": "object",
                "properties": {
                  "iata": {
                    "type": "string",
                    "default": "74Y",
                    "example": "74Y"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "CARGO",
                      "PASSENGER"
                    ],
                    "default": "CARGO",
                    "example": "CARGO"
                  }
                }
              },
              "distance": {
                "type": "number"
              },
              "dateTime": {
                "type": "object",
                "properties": {
                  "departure": {
                    "format": "date-time"
                  },
                  "arrival": {
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Hub": {
        "type": "object",
        "required": [
          "mode",
          "details"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "hub"
            ],
            "example": "hub",
            "default": "hub"
          },
          "details": {
            "type": "object",
            "required": [
              "hubType"
            ],
            "properties": {
              "hubType": {
                "type": "string",
                "enum": [
                  "WAREHOUSE",
                  "TRANSHIPMENT_SITE",
                  "STORAGE_TRANSHIPMENT",
                  "LIQUID_BULK_TERMINAL",
                  "MARITIME_CONTAINER_TERMINAL"
                ]
              }
            }
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "shipment": {
        "type": "object",
        "required": [
          "orders",
          "legs"
        ],
        "properties": {
          "metadata": {
            "type": "object"
          },
          "details": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "We recommend to use this parameter instead of `shipmentId` (deprecated)",
                "example": "AD35736"
              },
              "referenceNumber": {
                "type": "string",
                "description": "We recommend to use this parameter instead of `bookingNumber` (deprecated)",
                "example": "304i93424"
              },
              "status": {
                "type": "string",
                "enum": [
                  "BOOKED",
                  "ARRIVED"
                ],
                "example": "BOOKED"
              },
              "carrier": {
                "type": "object",
                "properties": {
                  "scac": {
                    "type": "string",
                    "example": "SCAC"
                  },
                  "name": {
                    "type": "string",
                    "example": "My carrier"
                  }
                }
              },
              "client": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Client"
                  }
                }
              },
              "shipmentId": {
                "type": "string",
                "deprecated": true,
                "description": "We recommend to use the parameter `id` instead.",
                "example": "AD35736"
              },
              "bookingNumber": {
                "type": "string",
                "deprecated": true,
                "description": "We recommend to use the parameter `referenceNumber` instead.",
                "example": "304i93424"
              }
            }
          },
          "orders": {
            "type": "array",
            "description": "We recommend to use this parameter instead of `containers` (deprecated). Maximum amount of orders is 5.",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "CONTAINER",
                    "PARCEL",
                    "FCL",
                    "LCL",
                    "PALLET",
                    "UNIT_LOAD"
                  ],
                  "default": "CONTAINER"
                },
                "sizeTypeCode": {
                  "type": "string",
                  "enum": [
                    "20GP",
                    "22G1",
                    "2200",
                    "22G0",
                    "2202",
                    "2210",
                    "40GP",
                    "42G1",
                    "42G0",
                    "40G1",
                    "40HC",
                    "45G1",
                    "4500",
                    "45G0",
                    "22R1",
                    "2231",
                    "42R1",
                    "4531",
                    "40NOR",
                    "45R1",
                    "45R8",
                    "40REHC",
                    "53GP"
                  ]
                },
                "quantity": {
                  "type": "number",
                  "default": 1
                },
                "weight": {
                  "type": "number",
                  "default": 300
                },
                "id": {
                  "type": "string",
                  "example": "OD45782"
                }
              }
            }
          },
          "legs": {
            "type": "array",
            "minItems": 1,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "from",
                    "to",
                    "mode"
                  ],
                  "properties": {
                    "from": {
                      "type": "string",
                      "example": "FRMRS",
                      "default": "FRMRS"
                    },
                    "to": {
                      "type": "string",
                      "example": "DEHAM",
                      "default": "DEHAM"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "road"
                      ],
                      "example": "road",
                      "default": "road"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "truckSize": {
                          "type": "integer"
                        },
                        "fuelType": {
                          "type": "string",
                          "enum": [
                            "DIESEL",
                            "CNG",
                            "LNG",
                            "PETROL",
                            "HVO",
                            "ELEC",
                            "LPG",
                            "BIOLNG",
                            "BIOCNG",
                            "HYDROGEN_GASEOUS_FCV",
                            "BIODIESEL",
                            "DIESEL99_BIODIESEL1",
                            "DIESEL98_BIODIESEL2",
                            "DIESEL95_BIODIESEL5",
                            "DIESEL93_BIODIESEL7",
                            "DIESEL90_BIODIESEL10",
                            "DIESEL80_BIODIESEL20",
                            "DIESEL50_BIODIESEL50"
                          ]
                        },
                        "fuel": {
                          "type": "string",
                          "example": "DIESEL",
                          "deprecated": true,
                          "description": "We recommend to use the parameter `fuelType` instead"
                        },
                        "distance": {
                          "type": "number"
                        },
                        "carrier": {
                          "type": "object",
                          "properties": {
                            "scac": {
                              "type": "string"
                            }
                          }
                        },
                        "dateTime": {
                          "type": "object",
                          "properties": {
                            "departure": {
                              "format": "date-time",
                              "example": "2022-02-24T18:00:00+01:00"
                            },
                            "arrival": {
                              "format": "date-time",
                              "example": "2022-02-22T15:00:00+01:00"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "from",
                    "to",
                    "mode"
                  ],
                  "properties": {
                    "from": {
                      "type": "string",
                      "example": "-73.768741607666,45.4261722564697",
                      "default": "-73.768741607666,45.4261722564697"
                    },
                    "to": {
                      "type": "string",
                      "example": "DEHAM",
                      "default": "DEHAM"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "sea"
                      ],
                      "example": "sea",
                      "default": "sea"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "voyageNumber": {
                          "type": "string"
                        },
                        "carrier": {
                          "type": "object",
                          "properties": {
                            "scac": {
                              "type": "string"
                            }
                          }
                        },
                        "vessel": {
                          "type": "object",
                          "properties": {
                            "imo": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "fuelType": {
                          "type": "string",
                          "enum": [
                            "HFO",
                            "VLSFO",
                            "ULSFO",
                            "MDO",
                            "MGO",
                            "LNG",
                            "BIOLNG",
                            "LSMGO",
                            "METHANOL",
                            "BIOMETHANOL",
                            "IFO380",
                            "LNG_CMACGM_VAS",
                            "UCO",
                            "METHANOL_COAL",
                            "METHANOL_GAS",
                            "METHANOL_RENEWABLES"
                          ]
                        },
                        "distance": {
                          "type": "number"
                        },
                        "dateTime": {
                          "type": "object",
                          "properties": {
                            "departure": {
                              "format": "date-time"
                            },
                            "arrival": {
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "from",
                    "to",
                    "mode"
                  ],
                  "properties": {
                    "from": {
                      "type": "string",
                      "example": "-73.768741607666,45.4261722564697",
                      "default": "-73.768741607666,45.4261722564697"
                    },
                    "to": {
                      "type": "string",
                      "example": "DEHAM",
                      "default": "DEHAM"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "rail"
                      ],
                      "example": "rail",
                      "default": "rail"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "fuelType": {
                          "type": "string",
                          "enum": [
                            "ELEC",
                            "DIESEL",
                            "DEFAULT"
                          ]
                        },
                        "fuel": {
                          "type": "string",
                          "example": "DIESEL",
                          "deprecated": true,
                          "description": "We recommend to use the parameter `fuelType` instead"
                        },
                        "distance": {
                          "type": "number"
                        },
                        "dateTime": {
                          "type": "object",
                          "properties": {
                            "departure": {
                              "format": "date-time"
                            },
                            "arrival": {
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "from",
                    "to",
                    "mode"
                  ],
                  "properties": {
                    "from": {
                      "type": "string",
                      "example": "SKBTS",
                      "default": "SKBTS"
                    },
                    "to": {
                      "type": "string",
                      "example": "DEHAM",
                      "default": "DEHAM"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "inland-water"
                      ],
                      "example": "inland-water",
                      "default": "inland-water"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "vesselType": {
                          "type": "string",
                          "enum": [
                            "MOTOR_VESSEL",
                            "COUPLED_CONVOY",
                            "PUSHED_CONVOY",
                            "CONTAINER_VESSEL_110",
                            "CONTAINER_VESSEL_135",
                            "CONTAINER_COUPLED"
                          ],
                          "default": "MOTOR_VESSEL",
                          "example": "MOTOR_VESSEL"
                        },
                        "distance": {
                          "type": "number"
                        },
                        "dateTime": {
                          "type": "object",
                          "properties": {
                            "departure": {
                              "format": "date-time"
                            },
                            "arrival": {
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "from",
                    "to",
                    "mode"
                  ],
                  "properties": {
                    "from": {
                      "type": "string",
                      "example": "FRMRS",
                      "default": "FRMRS"
                    },
                    "to": {
                      "type": "string",
                      "example": "DEHAM",
                      "default": "DEHAM"
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "air"
                      ],
                      "example": "air",
                      "default": "air"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "aircraft": {
                          "type": "object",
                          "properties": {
                            "iata": {
                              "type": "string",
                              "default": "74Y",
                              "example": "74Y"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "CARGO",
                                "PASSENGER"
                              ],
                              "default": "CARGO",
                              "example": "CARGO"
                            }
                          }
                        },
                        "distance": {
                          "type": "number"
                        },
                        "dateTime": {
                          "type": "object",
                          "properties": {
                            "departure": {
                              "format": "date-time"
                            },
                            "arrival": {
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "mode",
                    "details"
                  ],
                  "properties": {
                    "mode": {
                      "type": "string",
                      "enum": [
                        "hub"
                      ],
                      "example": "hub",
                      "default": "hub"
                    },
                    "details": {
                      "type": "object",
                      "required": [
                        "hubType"
                      ],
                      "properties": {
                        "hubType": {
                          "type": "string",
                          "enum": [
                            "WAREHOUSE",
                            "TRANSHIPMENT_SITE",
                            "STORAGE_TRANSHIPMENT",
                            "LIQUID_BULK_TERMINAL",
                            "MARITIME_CONTAINER_TERMINAL"
                          ]
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              ]
            }
          },
          "containers": {
            "type": "array",
            "deprecated": true,
            "description": "We recommend to use the parameter `bookings` instead.",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "sizeTypeCode": {
                  "type": "string",
                  "enum": [
                    "20GP",
                    "22G1",
                    "2200",
                    "22G0",
                    "2202",
                    "2210",
                    "40GP",
                    "42G1",
                    "42G0",
                    "40G1",
                    "40HC",
                    "45G1",
                    "4500",
                    "45G0",
                    "22R1",
                    "2231",
                    "42R1",
                    "4531",
                    "40NOR",
                    "45R1",
                    "45R8",
                    "40REHC",
                    "53GP"
                  ]
                },
                "quantity": {
                  "type": "number"
                },
                "weight": {
                  "type": "number"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "deprecated": true,
            "enum": [
              "CONTAINER"
            ],
            "default": "CONTAINER"
          }
        }
      },
      "milkrun": {
        "type": "object",
        "required": [
          "locations",
          "orders",
          "mode"
        ],
        "properties": {
          "metadata": {
            "type": "object"
          },
          "locations": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            },
            "default": [
              "FRMRS",
              "FRVAF"
            ]
          },
          "orders": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "fromIndex": {
                  "type": "integer",
                  "description": "index of the stop where the parcel is loaded.",
                  "default": 1
                },
                "toIndex": {
                  "type": "integer",
                  "description": "index of the stop where the parcel is unloaded.",
                  "default": 2
                },
                "weight": {
                  "type": "number",
                  "description": "weight (in kg) of the parcel",
                  "default": 1000
                },
                "id": {
                  "type": "string",
                  "description": "identifier of the booking (can be an external reference)",
                  "default": "ABC1234"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "PARCEL"
                  ],
                  "default": "PARCEL"
                }
              }
            }
          },
          "mode": {
            "type": "string",
            "enum": [
              "road"
            ],
            "default": "road"
          },
          "details": {
            "type": "object",
            "properties": {
              "fuel": {
                "type": "string",
                "description": "fuel type of the truck used during the run.",
                "enum": [
                  "DIESEL",
                  "PETROL",
                  "LPG"
                ],
                "default": "DIESEL"
              },
              "truckSize": {
                "type": "integer",
                "description": "truck size of the asset (GWV from 4t to 60t)",
                "default": 34
              },
              "carrier": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scac": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}